generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement()) @map("id")
  username  String    @unique @map("username")
  email     String?   @unique @map("email")
  password  String?   @map("password")
  createdAt DateTime  @default(now()) @map("created_at")
  accounts  Account[]
  demoras   Demora[]
  sessions  Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid()) @map("id")
  userId            Int     @map("user_id")
  type              String  @map("type")
  provider          String  @map("provider")
  providerAccountId String  @map("provider_account_id")
  accessToken       String? @map("access_token")
  refreshToken      String? @map("refresh_token")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @map("id")
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime @map("expires")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model Demora {
  id             Int             @id @default(autoincrement()) @map("id")
  userId         Int?            @map("user_id")
  userName       String?         @map("user_name")
  fechaInicio    String          @map("fecha_inicio")
  tiempoTotal    String?         @map("tiempo_total")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  user           User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  primerProceso  PrimerProceso?
  procesoFinal   ProcesoFinal?
  segundoProceso SegundoProceso?
  tercerProceso  TercerProceso?

  @@index([userId], map: "demoras_user_id_fkey")
  @@map("demoras")
}

model PrimerProceso {
  id                          Int      @id @default(autoincrement()) @map("id")
  demoraId                    Int      @unique @map("demora_id")
  numeroTransaccion           String   @unique   @map("numero_transaccion")
  pesadorEntrada              String   @map("pesador_entrada")
  porteriaEntrada             String   @map("porteria_entrada")
  metodoCarga                 String   @map("metodo_carga")
  numeroEjes                  String   @map("numero_ejes")
  puntoDespacho               String   @map("punto_despacho")
  basculaEntrada              String   @map("bascula_entrada")
  condicion                   String?  @map("condicion")
  tiempoScanner               String?  @map("tiempo_scanner")
  fechaScanner                String?  @map("fecha_scanner")
  scannerObservaciones        String?  @map("scanner_obs") @db.LongText
  tiempoPrechequeo            String?  @map("tiempo_prechequeo")
  fechaPrechequeo             String?  @map("fecha_prechequeo")
  prechequeoObservaciones     String?  @map("prechequeo_obs") @db.LongText
  tiempoAutorizacion          String?  @map("tiempo_autorizacion")
  fechaAutorizacion           String?  @map("fecha_autorizacion")
  autorizacionObservaciones   String?  @map("autorizacion_obs") @db.LongText
  tiempoIngresoPlanta         String?  @map("tiempo_ingreso_planta")
  ingresoPlantaObservaciones  String?  @map("ingreso_obs") @db.LongText
  tiempoLlegadaBascula        String?  @map("tiempo_llegada_bascula")
  llegadaBasculaObservaciones String?  @map("llegada_bascula_obs") @db.LongText
  tiempoEntradaBascula        String?  @map("tiempo_entrada_bascula")
  entradaBasculaObservaciones String?  @map("entrada_obs") @db.LongText
  tiempoSalidaBascula         String?  @map("tiempo_salida_bascula")
  salidaBasculaObservaciones  String?  @map("salida_obs") @db.LongText

  demora                      Demora   @relation(fields: [demoraId], references: [id], onDelete: Cascade)

  createdAt                   DateTime @default(now()) @map("created_at")
  updatedAt                   DateTime @updatedAt @map("updated_at")
  @@map("primer_proceso")
}

model SegundoProceso {
  id                            Int      @id @default(autoincrement()) @map("id")
  demoraId                     Int      @unique @map("demora_id")
  operador                    String   @map("operador")
  enlonador                   String   @map("enlonador")
  modeloEquipo                String   @map("modelo_equipo")
  personalAsignado            Int      @map("personal_asignado")
  personalAsignadoObservaciones String? @map("personal_asignado_obs") @db.LongText
  
  tiempoLlegadaPunto          String?  @map("tiempo_llegada_punto")
  llegadaPuntoObservaciones   String?  @map("llegada_punto_obs") @db.LongText
  tiempoLlegadaOperador       String?  @map("tiempo_llegada_operador")
  llegadaOperadorObservaciones String? @map("llegada_operador_obs") @db.LongText
  tiempoLlegadaEnlonador      String?  @map("tiempo_llegada_enlonador")
  llegadaEnlonadorObservaciones String? @map("llegada_enlonador_obs") @db.LongText
  tiempoLlegadaEquipo         String?  @map("tiempo_llegada_equipo")
  llegadaEquipoObservaciones  String?  @map("llegada_equipo_obs") @db.LongText
  tiempoInicioCarga           String?  @map("tiempo_inicio_carga")
  inicioCargaObservaciones    String?  @map("inicio_carga_obs") @db.LongText
  tiempoTerminaCarga          String?  @map("tiempo_termina_carga")
  terminaCargaObservaciones   String?  @map("termina_carga_obs") @db.LongText
  tiempoSalidaPunto           String?  @map("tiempo_salida_punto")
  salidaPuntoObservaciones    String?  @map("salida_punto_obs") @db.LongText

  demora                      Demora   @relation(fields: [demoraId], references: [id], onDelete: Cascade)

  createdAt                   DateTime @default(now()) @map("created_at")
  updatedAt                   DateTime @updatedAt @map("updated_at")
  @@map("segundo_proceso")
}

model TercerProceso {
  id                          Int      @id @default(autoincrement()) @map("id")
  demoraId                   Int      @unique @map("demora_id")
  basculaSalida             String   @map("bascula_salida")
  pesadorSalida             String   @map("pesador_salida")

  tiempoLlegadaBascula      String?  @map("tiempo_llegada_bascula")
  llegadaBasculaObservaciones String? @map("llegada_bascula_obs") @db.LongText
  tiempoEntradaBascula       String?  @map("tiempo_entrada_bascula")
  entradaBasculaObservaciones String?  @map("entrada_obs") @db.LongText
  tiempoSalidaBascula        String?  @map("tiempo_salida_bascula")
  salidaBasculaObservaciones String?  @map("salida_obs") @db.LongText

  demora                     Demora   @relation(fields: [demoraId], references: [id], onDelete: Cascade)
  vueltas                   Vueltas[]

  createdAt                  DateTime @default(now()) @map("created_at")
  updatedAt                  DateTime @updatedAt @map("updated_at")
  @@map("tercer_proceso")
}

model Vueltas {
  id                          Int      @id @default(autoincrement()) @map("id")
  tercerProcesoId            Int      @map("tercer_proceso_id")
  numeroVuelta               Int      @map("numero_vuelta")

  tiempoLlegadaPunto         String?  @map("tiempo_llegada_punto")
  llegadaPuntoObservaciones  String?  @map("llegada_punto_obs") @db.LongText
  tiempoSalidaPunto          String?  @map("tiempo_salida_punto")
  salidaPuntoObservaciones   String?  @map("salida_punto_obs") @db.LongText
  tiempoLlegadaBascula       String?  @map("tiempo_llegada_bascula")
  llegadaBasculaObservaciones String? @map("llegada_bascula_obs") @db.LongText
  tiempoEntradaBascula       String?  @map("tiempo_entrada_bascula")
  entradaBasculaObservaciones String?  @map("entrada_bascula_obs") @db.LongText
  tiempoSalidaBascula        String?  @map("tiempo_salida_bascula")
  salidaBasculaObservaciones String?  @map("salida_bascula_obs") @db.LongText

  tercerProceso              TercerProceso @relation(fields: [tercerProcesoId], references: [id], onDelete: Cascade)

  createdAt                  DateTime @default(now()) @map("created_at")
  updatedAt                  DateTime @updatedAt @map("updated_at")
  @@index([tercerProcesoId], map: "vueltas_tercer_proceso_id_fkey")
  @@map("vueltas")
}

model ProcesoFinal {
  id                           Int      @id @default(autoincrement()) @map("id")
  demoraId                     Int      @unique @map("demora_id")
  tiempoSalidaPlanta           String?  @map("tiempo_salida_planta")
  salidaPlantaObservaciones    String?  @map("salida_planta_obs") @db.LongText
  porteriaSalida               String   @map("porteria_salida")
  tiempoLlegadaPorteria        String?  @map("tiempo_llegada_porteria")
  llegadaPorteriaObservaciones String?  @map("llegada_porteria_obs") @db.LongText

  createdAt                    DateTime @default(now()) @map("created_at")
  updatedAt                    DateTime @updatedAt @map("updated_at")
  demora                       Demora   @relation(fields: [demoraId], references: [id], onDelete: Cascade)
  @@map("proceso_final")
}

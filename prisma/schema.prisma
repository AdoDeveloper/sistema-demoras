generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ==================== MODELOS ORIGINALES (GRANEL) ====================

model User {
  id             Int       @id @default(autoincrement()) @map("id")
  username       String    @unique @map("username")
  nombreCompleto String    @map("nombre_completo")
  codigo         String    @map("codigo")
  email          String?   @map("email")
  password       String?   @map("password")
  eliminado      Boolean   @default(false) @map("eliminado") // 0 por defecto (no eliminado)
  activo         Boolean   @default(true)  @map("activo")     // 1 por defecto (activo)
  createdAt      DateTime  @default(now()) @map("created_at")
  demoras        Demora[]
  envasados      Envasado[]
  molinos        Molino[]
  actividades    Actividad[]
  equipos        Equipo[]
  sessions       Session[]
  roleId         Int       @map("role_id")
  role           Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Role {
  id    Int     @id @default(autoincrement()) @map("id")
  name  String  @unique @map("name")
  users User[]

  @@map("roles")
}

model Session {
  id           String   @id @default(uuid()) @map("id")
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime @map("expires")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}
// GRANEL
model Demora {
  id             Int             @id @default(autoincrement()) @map("id")
  userId         Int?            @map("user_id")
  userName       String?         @map("user_name")
  fechaInicio    String          @map("fecha_inicio")
  tiempoTotal    String?         @map("tiempo_total")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  user           User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  primerProceso  PrimerProceso?
  segundoProceso SegundoProceso?
  tercerProceso  TercerProceso?
  procesoFinal   ProcesoFinal?

  @@index([userId], map: "demoras_user_id_fkey")
  @@map("demoras")
}

model PrimerProceso {
  id                          Int      @id @default(autoincrement()) @map("id")
  demoraId                    Int      @unique @map("demora_id")
  numeroTransaccion           String   @unique   @map("numero_transaccion")
  pesadorEntrada              String   @map("pesador_entrada")
  porteriaEntrada             String   @map("porteria_entrada")
  metodoCarga                 String   @map("metodo_carga")
  numeroEjes                  String   @map("numero_ejes")
  puntoDespacho               String   @map("punto_despacho")
  basculaEntrada              String   @map("bascula_entrada")
  condicion                   String?  @map("condicion")
  tiempoScanner               String?  @map("tiempo_scanner")
  fechaScanner                String?  @map("fecha_scanner")
  scannerObservaciones        String?  @map("scanner_obs") @db.LongText
  tiempoPrechequeo            String?  @map("tiempo_prechequeo")
  fechaPrechequeo             String?  @map("fecha_prechequeo")
  prechequeoObservaciones     String?  @map("prechequeo_obs") @db.LongText
  tiempoAutorizacion          String?  @map("tiempo_autorizacion")
  fechaAutorizacion           String?  @map("fecha_autorizacion")
  autorizacionObservaciones   String?  @map("autorizacion_obs") @db.LongText
  tiempoIngresoPlanta         String?  @map("tiempo_ingreso_planta")
  ingresoPlantaObservaciones  String?  @map("ingreso_obs") @db.LongText
  tiempoLlegadaBascula        String?  @map("tiempo_llegada_bascula")
  llegadaBasculaObservaciones String?  @map("llegada_bascula_obs") @db.LongText
  tiempoEntradaBascula        String?  @map("tiempo_entrada_bascula")
  entradaBasculaObservaciones String?  @map("entrada_obs") @db.LongText
  tiempoSalidaBascula         String?  @map("tiempo_salida_bascula")
  salidaBasculaObservaciones  String?  @map("salida_obs") @db.LongText

  demora                      Demora   @relation(fields: [demoraId], references: [id], onDelete: Cascade)

  createdAt                   DateTime @default(now()) @map("created_at")
  updatedAt                   DateTime @updatedAt @map("updated_at")
  @@map("primer_proceso")
}

model SegundoProceso {
  id                            Int      @id @default(autoincrement()) @map("id")
  demoraId                     Int      @unique @map("demora_id")
  operador                    String   @map("operador")
  enlonador                   String   @map("enlonador")
  modeloEquipo                String   @map("modelo_equipo")
  personalAsignado            Int      @map("personal_asignado")
  personalAsignadoObservaciones String? @map("personal_asignado_obs") @db.LongText
  
  tiempoLlegadaPunto          String?  @map("tiempo_llegada_punto")
  llegadaPuntoObservaciones   String?  @map("llegada_punto_obs") @db.LongText
  tiempoLlegadaOperador       String?  @map("tiempo_llegada_operador")
  llegadaOperadorObservaciones String? @map("llegada_operador_obs") @db.LongText
  tiempoLlegadaEnlonador      String?  @map("tiempo_llegada_enlonador")
  llegadaEnlonadorObservaciones String? @map("llegada_enlonador_obs") @db.LongText
  tiempoLlegadaEquipo         String?  @map("tiempo_llegada_equipo")
  llegadaEquipoObservaciones  String?  @map("llegada_equipo_obs") @db.LongText
  tiempoInicioCarga           String?  @map("tiempo_inicio_carga")
  inicioCargaObservaciones    String?  @map("inicio_carga_obs") @db.LongText
  tiempoTerminaCarga          String?  @map("tiempo_termina_carga")
  terminaCargaObservaciones   String?  @map("termina_carga_obs") @db.LongText
  tiempoSalidaPunto           String?  @map("tiempo_salida_punto")
  salidaPuntoObservaciones    String?  @map("salida_punto_obs") @db.LongText

  demora                      Demora   @relation(fields: [demoraId], references: [id], onDelete: Cascade)

  createdAt                   DateTime @default(now()) @map("created_at")
  updatedAt                   DateTime @updatedAt @map("updated_at")
  @@map("segundo_proceso")
}

model TercerProceso {
  id                          Int      @id @default(autoincrement()) @map("id")
  demoraId                   Int      @unique @map("demora_id")
  basculaSalida             String   @map("bascula_salida")
  pesadorSalida             String   @map("pesador_salida")

  tiempoLlegadaBascula      String?  @map("tiempo_llegada_bascula")
  llegadaBasculaObservaciones String? @map("llegada_bascula_obs") @db.LongText
  tiempoEntradaBascula       String?  @map("tiempo_entrada_bascula")
  entradaBasculaObservaciones String?  @map("entrada_obs") @db.LongText
  tiempoSalidaBascula        String?  @map("tiempo_salida_bascula")
  salidaBasculaObservaciones String?  @map("salida_obs") @db.LongText

  demora                     Demora   @relation(fields: [demoraId], references: [id], onDelete: Cascade)
  vueltas                   Vueltas[]

  createdAt                  DateTime @default(now()) @map("created_at")
  updatedAt                  DateTime @updatedAt @map("updated_at")
  @@map("tercer_proceso")
}

model Vueltas {
  id                          Int      @id @default(autoincrement()) @map("id")
  tercerProcesoId            Int      @map("tercer_proceso_id")
  numeroVuelta               Int      @map("numero_vuelta")

  tiempoLlegadaPunto         String?  @map("tiempo_llegada_punto")
  llegadaPuntoObservaciones  String?  @map("llegada_punto_obs") @db.LongText
  tiempoSalidaPunto          String?  @map("tiempo_salida_punto")
  salidaPuntoObservaciones   String?  @map("salida_punto_obs") @db.LongText
  tiempoLlegadaBascula       String?  @map("tiempo_llegada_bascula")
  llegadaBasculaObservaciones String? @map("llegada_bascula_obs") @db.LongText
  tiempoEntradaBascula       String?  @map("tiempo_entrada_bascula")
  entradaBasculaObservaciones String?  @map("entrada_bascula_obs") @db.LongText
  tiempoSalidaBascula        String?  @map("tiempo_salida_bascula")
  salidaBasculaObservaciones String?  @map("salida_bascula_obs") @db.LongText

  tercerProceso              TercerProceso @relation(fields: [tercerProcesoId], references: [id], onDelete: Cascade)

  createdAt                  DateTime @default(now()) @map("created_at")
  updatedAt                  DateTime @updatedAt @map("updated_at")
  @@index([tercerProcesoId], map: "vueltas_tercer_proceso_id_fkey")
  @@map("vueltas")
}

model ProcesoFinal {
  id                           Int      @id @default(autoincrement()) @map("id")
  demoraId                     Int      @unique @map("demora_id")
  tiempoSalidaPlanta           String?  @map("tiempo_salida_planta")
  salidaPlantaObservaciones    String?  @map("salida_planta_obs") @db.LongText
  porteriaSalida               String   @map("porteria_salida")
  tiempoLlegadaPorteria        String?  @map("tiempo_llegada_porteria")
  llegadaPorteriaObservaciones String?  @map("llegada_porteria_obs") @db.LongText
  createdAt                  DateTime @default(now()) @map("created_at")
  updatedAt                  DateTime @updatedAt @map("updated_at")

  demora                       Demora   @relation(fields: [demoraId], references: [id], onDelete: Cascade)
  @@map("proceso_final")
}

// ==================== NUEVOS MODELOS PARA ENVASADO ====================

model Envasado {
  id             Int          @id @default(autoincrement()) @map("id")
  userId         Int?         @map("user_id")
  userName       String?      @map("user_name")
  fechaInicio    String       @map("fecha_inicio")
  tiempoTotal    String?      @map("tiempo_total")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  user           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  primerProceso  PrimerProcesoEnv?
  segundoProceso SegundoProcesoEnv?
  tercerProceso  TercerProcesoEnv?
  procesoFinal   ProcesoFinalEnv?

  @@index([userId], map: "envasados_user_id_fkey")
  @@map("envasados")
}

model PrimerProcesoEnv {
  id                          Int      @id @default(autoincrement()) @map("id")
  envasadoId                  Int      @unique @map("envasado_id")
  numeroTransaccion           String   @unique @map("numero_transaccion")
  numeroOrden                 String   @map("numero_orden")
  pesadorEntrada              String   @map("pesador_entrada")
  porteriaEntrada             String   @map("porteria_entrada")
  metodoCarga                 String   @map("metodo_carga")
  numeroEjes                  String   @map("numero_ejes")
  puntoDespacho               String   @map("punto_despacho")
  puntoEnvasado               String   @map("punto_envasado")
  basculaEntrada              String   @map("bascula_entrada")
  condicion                   String?  @map("condicion")
  tiempoScanner               String?  @map("tiempo_scanner")
  fechaScanner                String?  @map("fecha_scanner")
  scannerObservaciones        String?  @map("scanner_obs") @db.LongText
  tiempoPrechequeo            String?  @map("tiempo_prechequeo")
  fechaPrechequeo             String?  @map("fecha_prechequeo")
  prechequeoObservaciones     String?  @map("prechequeo_obs") @db.LongText
  tiempoAutorizacion          String?  @map("tiempo_autorizacion")
  fechaAutorizacion           String?  @map("fecha_autorizacion")
  autorizacionObservaciones   String?  @map("autorizacion_obs") @db.LongText
  tiempoIngresoPlanta         String?  @map("tiempo_ingreso_planta")
  ingresoPlantaObservaciones  String?  @map("ingreso_obs") @db.LongText
  tiempoLlegadaBascula        String?  @map("tiempo_llegada_bascula")
  llegadaBasculaObservaciones String?  @map("llegada_bascula_obs") @db.LongText
  tiempoEntradaBascula        String?  @map("tiempo_entrada_bascula")
  entradaBasculaObservaciones String?  @map("entrada_obs") @db.LongText
  tiempoSalidaBascula         String?  @map("tiempo_salida_bascula")
  salidaBasculaObservaciones  String?  @map("salida_obs") @db.LongText

  envasado                    Envasado   @relation(fields: [envasadoId], references: [id], onDelete: Cascade)

  createdAt                   DateTime   @default(now()) @map("created_at")
  updatedAt                   DateTime   @updatedAt @map("updated_at")
  @@map("primer_proceso_env")
}

model SegundoProcesoEnv {
  id                            Int      @id @default(autoincrement()) @map("id")
  envasadoId                    Int      @unique @map("envasado_id")
  operador                      String   @map("operador")
  grupo                         String   @map("grupo")
  modeloEquipo                  String   @map("modelo_equipo")
  personalAsignado              Int      @map("personal_asignado")
  personalAsignadoObservaciones String?  @map("personal_asignado_obs") @db.LongText
  
  parosStatsTotalParos          Int?     @map("total_paros")
  parosStatsTiempoTotalParos    String?  @map("tiempo_total_paros")
  
  tiempoLlegadaPunto            String?  @map("tiempo_llegada_punto")
  llegadaPuntoObservaciones     String?  @map("llegada_punto_obs") @db.LongText
  tiempoLlegadaOperador         String?  @map("tiempo_llegada_operador")
  llegadaOperadorObservaciones  String?  @map("llegada_operador_obs") @db.LongText
  tiempoLlegadaGrupo            String?  @map("tiempo_llegada_grupo")
  llegadaGrupoObservaciones     String?  @map("llegada_grupo_obs") @db.LongText
  tiempoLlegadaEquipo           String?  @map("tiempo_llegada_equipo")
  llegadaEquipoObservaciones    String?  @map("llegada_equipo_obs") @db.LongText
  tiempoInicioCarga             String?  @map("tiempo_inicio_carga")
  inicioCargaObservaciones      String?  @map("inicio_carga_obs") @db.LongText
  tiempoTerminaCarga            String?  @map("tiempo_termina_carga")
  terminaCargaObservaciones     String?  @map("termina_carga_obs") @db.LongText
  tiempoSalidaPunto             String?  @map("tiempo_salida_punto")
  salidaPuntoObservaciones      String?  @map("salida_punto_obs") @db.LongText

  envasado                      Envasado   @relation(fields: [envasadoId], references: [id], onDelete: Cascade)

  createdAt                     DateTime   @default(now()) @map("created_at")
  updatedAt                     DateTime   @updatedAt @map("updated_at")
  parosEnv                      ParosEnv[]

  @@map("segundo_proceso_env")
}

model TercerProcesoEnv {
  id                          Int      @id @default(autoincrement()) @map("id")
  envasadoId                  Int      @unique @map("envasado_id")
  basculaSalida               String   @map("bascula_salida")
  pesadorSalida               String   @map("pesador_salida")

  tiempoLlegadaBascula        String?  @map("tiempo_llegada_bascula")
  llegadaBasculaObservaciones String?  @map("llegada_bascula_obs") @db.LongText
  tiempoEntradaBascula        String?  @map("tiempo_entrada_bascula")
  entradaBasculaObservaciones String?  @map("entrada_obs") @db.LongText
  tiempoSalidaBascula         String?  @map("tiempo_salida_bascula")
  salidaBasculaObservaciones  String?  @map("salida_obs") @db.LongText

  envasado                    Envasado   @relation(fields: [envasadoId], references: [id], onDelete: Cascade)
  vueltasEnv                  VueltasEnv[]

  createdAt                   DateTime   @default(now()) @map("created_at")
  updatedAt                   DateTime   @updatedAt @map("updated_at")
  @@map("tercer_proceso_env")
}

model ProcesoFinalEnv {
  id                           Int      @id @default(autoincrement()) @map("id")
  envasadoId                   Int      @unique @map("envasado_id")
  tiempoSalidaPlanta           String?  @map("tiempo_salida_planta")
  salidaPlantaObservaciones    String?  @map("salida_planta_obs") @db.LongText
  porteriaSalida               String   @map("porteria_salida")
  tiempoLlegadaPorteria        String?  @map("tiempo_llegada_porteria")
  llegadaPorteriaObservaciones String?  @map("llegada_porteria_obs") @db.LongText

  envasado                     Envasado   @relation(fields: [envasadoId], references: [id], onDelete: Cascade)
  
  createdAt                    DateTime   @default(now()) @map("created_at")
  updatedAt                    DateTime   @updatedAt @map("updated_at")
  @@map("proceso_final_env")
}

model VueltasEnv {
  id                          Int      @id @default(autoincrement()) @map("id")
  tercerProcesoEnvId          Int      @map("tercer_proceso_env_id")
  numeroVuelta                Int      @map("numero_vuelta")

  tiempoLlegadaPunto          String?  @map("tiempo_llegada_punto")
  llegadaPuntoObservaciones   String?  @map("llegada_punto_obs") @db.LongText
  tiempoSalidaPunto           String?  @map("tiempo_salida_punto")
  salidaPuntoObservaciones    String?  @map("salida_punto_obs") @db.LongText
  tiempoLlegadaBascula        String?  @map("tiempo_llegada_bascula")
  llegadaBasculaObservaciones String?  @map("llegada_bascula_obs") @db.LongText
  tiempoEntradaBascula        String?  @map("tiempo_entrada_bascula")
  entradaBasculaObservaciones String?  @map("entrada_bascula_obs") @db.LongText
  tiempoSalidaBascula         String?  @map("tiempo_salida_bascula")
  salidaBasculaObservaciones  String?  @map("salida_bascula_obs") @db.LongText

  tercerProcesoEnv            TercerProcesoEnv @relation(fields: [tercerProcesoEnvId], references: [id], onDelete: Cascade)

  createdAt                   DateTime   @default(now()) @map("created_at")
  updatedAt                   DateTime   @updatedAt @map("updated_at")
  @@index([tercerProcesoEnvId], map: "vueltas_env_tercer_proceso_env_id_fkey")
  @@map("vueltas_env")
}

model ParosEnv {
  id                  Int     @id @default(autoincrement()) @map("id")
  segundoProcesoEnvId Int     @map("segundo_proceso_env_id")
  inicio              String  @map("inicio")
  fin                 String  @map("fin")
  razon               String  @map("razon")
  diffCargaInicio     String  @map("diff_carga_inicio")
  duracionParo        String  @map("duracion_paro")

  segundoProcesoEnv   SegundoProcesoEnv @relation(fields: [segundoProcesoEnvId], references: [id], onDelete: Cascade)

  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  @@index([segundoProcesoEnvId], map: "paros_env_segundo_proceso_env_id_fkey")
  @@map("paros_env")
}

model Molino {
  id             Int              @id @default(autoincrement()) @map("id")
  userId         Int?             @map("user_id")
  userName       String?          @map("user_name")
  fechaInicio    String           @map("fecha_inicio")
  tiempoTotal    String?          @map("tiempo_total")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  user           User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  primerProceso  PrimerProcesoMol?
  segundoProceso SegundoProcesoMol?
  tercerProceso  TercerProcesoMol?
  procesoFinal   ProcesoFinalMol?

  @@index([userId], map: "molidos_user_id_fkey")
  @@map("molidos")
}

model PrimerProcesoMol {
  id                          Int      @id @default(autoincrement()) @map("id")
  molId                       Int      @unique @map("mol_id")
  numeroTransaccion           String   @unique @map("numero_transaccion")
  numeroOrden                 String   @map("numero_orden")
  numeroCriba                 String   @map("numero_criba")
  numeroMolino                String   @map("numero_molino")
  pesadorEntrada              String   @map("pesador_entrada")
  porteriaEntrada             String   @map("porteria_entrada")
  presentacion                String   @map("presentacion")
  puntoDespacho               String   @map("punto_despacho")
  puntoEnvasado                 String   @map("punto_envasado")
  basculaEntrada              String   @map("bascula_entrada")
  metodoCarga                 String   @map("metodo_carga")
  numeroEjes                  String   @map("numero_ejes")
  condicion                   String?  @map("condicion")
  tiempoScanner               String?  @map("tiempo_scanner")
  fechaScanner                String?  @map("fecha_scanner")
  scannerObservaciones        String?  @map("scanner_obs") @db.LongText
  tiempoPrechequeo            String?  @map("tiempo_prechequeo")
  fechaPrechequeo             String?  @map("fecha_prechequeo")
  prechequeoObservaciones     String?  @map("prechequeo_obs") @db.LongText
  tiempoAutorizacion          String?  @map("tiempo_autorizacion")
  fechaAutorizacion           String?  @map("fecha_autorizacion")
  autorizacionObservaciones   String?  @map("autorizacion_obs") @db.LongText
  tiempoIngresoPlanta         String?  @map("tiempo_ingreso_planta")
  ingresoPlantaObservaciones  String?  @map("ingreso_obs") @db.LongText
  tiempoLlegadaBascula        String?  @map("tiempo_llegada_bascula")
  llegadaBasculaObservaciones String?  @map("llegada_bascula_obs") @db.LongText
  tiempoEntradaBascula        String?  @map("tiempo_entrada_bascula")
  entradaBasculaObservaciones String?  @map("entrada_obs") @db.LongText
  tiempoSalidaBascula         String?  @map("tiempo_salida_bascula")
  salidaBasculaObservaciones  String?  @map("salida_obs") @db.LongText

  molino                         Molino      @relation(fields: [molId], references: [id], onDelete: Cascade)

  createdAt                   DateTime @default(now()) @map("created_at")
  updatedAt                   DateTime @updatedAt @map("updated_at")
  
  @@map("primer_proceso_mol")
}

model SegundoProcesoMol {
  id                            Int      @id @default(autoincrement()) @map("id")
  molId                         Int      @unique @map("mol_id")
  operador                      String   @map("operador")
  grupo                         String   @map("grupo")
  modeloEquipo                  String   @map("modelo_equipo")
  personalAsignado              Int      @map("personal_asignado")
  personalAsignadoObservaciones String?  @map("personal_asignado_obs") @db.LongText
  
  parosStatsTotalParos          Int?     @map("total_paros")
  parosStatsTiempoTotalParos    String?  @map("tiempo_total_paros")
  
  tiempoLlegadaPunto            String?  @map("tiempo_llegada_punto")
  llegadaPuntoObservaciones     String?  @map("llegada_punto_obs") @db.LongText
  tiempoLlegadaOperador         String?  @map("tiempo_llegada_operador")
  llegadaOperadorObservaciones  String?  @map("llegada_operador_obs") @db.LongText
  tiempoLlegadaGrupo            String?  @map("tiempo_llegada_grupo")
  llegadaGrupoObservaciones     String?  @map("llegada_grupo_obs") @db.LongText
  tiempoLlegadaEquipo           String?  @map("tiempo_llegada_equipo")
  llegadaEquipoObservaciones    String?  @map("llegada_equipo_obs") @db.LongText
  tiempoInicioCarga             String?  @map("tiempo_inicio_carga")
  inicioCargaObservaciones      String?  @map("inicio_carga_obs") @db.LongText
  tiempoTerminaCarga            String?  @map("tiempo_termina_carga")
  terminaCargaObservaciones     String?  @map("termina_carga_obs") @db.LongText
  
  // Campos específicos de molido
  tiempoInicioMolido            String?  @map("tiempo_inicio_molido")
  inicioMolidoObservaciones     String?  @map("inicio_molido_obs") @db.LongText
  tiempoTerminaMolido           String?  @map("tiempo_termina_molido")
  terminaMolidoObservaciones    String?  @map("termina_molido_obs") @db.LongText
  tiempoSalidaPunto             String?  @map("tiempo_salida_punto")
  salidaPuntoObservaciones      String?  @map("salida_punto_obs") @db.LongText

  molino                        Molino      @relation(fields: [molId], references: [id], onDelete: Cascade)
  parosMol                      ParosMol[]

  createdAt                     DateTime @default(now()) @map("created_at")
  updatedAt                     DateTime @updatedAt @map("updated_at")
  
  @@map("segundo_proceso_mol")
}

model ParosMol {
  id                    Int      @id @default(autoincrement()) @map("id")
  segundoProcesoMolId   Int      @map("segundo_proceso_mol_id")
  inicio                String   @map("inicio")
  fin                   String   @map("fin")
  razon                 String   @map("razon")
  diffCargaInicio       String   @map("diff_carga_inicio")
  duracionParo          String   @map("duracion_paro")

  segundoProcesoMol     SegundoProcesoMol @relation(fields: [segundoProcesoMolId], references: [id], onDelete: Cascade)

  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  @@index([segundoProcesoMolId], map: "paros_mol_segundo_proceso_mol_id_fkey")
  @@map("paros_mol")
}

model TercerProcesoMol {
  id                          Int      @id @default(autoincrement()) @map("id")
  molId                       Int      @unique @map("mol_id")
  basculaSalida               String   @map("bascula_salida")
  pesadorSalida               String   @map("pesador_salida")
  tiempoLlegadaBascula        String?  @map("tiempo_llegada_bascula")
  llegadaBasculaObservaciones String?  @map("llegada_bascula_obs") @db.LongText
  tiempoEntradaBascula        String?  @map("tiempo_entrada_bascula")
  entradaBasculaObservaciones String?  @map("entrada_obs") @db.LongText
  tiempoSalidaBascula         String?  @map("tiempo_salida_bascula")
  salidaBasculaObservaciones  String?  @map("salida_obs") @db.LongText

  molino                         Molino      @relation(fields: [molId], references: [id], onDelete: Cascade)
  vueltasMol                  VueltasMol[]

  createdAt                   DateTime @default(now()) @map("created_at")
  updatedAt                   DateTime @updatedAt @map("updated_at")
  
  @@map("tercer_proceso_mol")
}

model VueltasMol {
  id                          Int      @id @default(autoincrement()) @map("id")
  tercerProcesoMolId          Int      @map("tercer_proceso_mol_id")
  numeroVuelta                Int      @map("numero_vuelta")
  tiempoLlegadaPunto          String?  @map("tiempo_llegada_punto")
  llegadaPuntoObservaciones   String?  @map("llegada_punto_obs") @db.LongText
  tiempoSalidaPunto           String?  @map("tiempo_salida_punto")
  salidaPuntoObservaciones    String?  @map("salida_punto_obs") @db.LongText
  tiempoLlegadaBascula        String?  @map("tiempo_llegada_bascula")
  llegadaBasculaObservaciones String?  @map("llegada_bascula_obs") @db.LongText
  tiempoEntradaBascula        String?  @map("tiempo_entrada_bascula")
  entradaBasculaObservaciones String?  @map("entrada_bascula_obs") @db.LongText
  tiempoSalidaBascula         String?  @map("tiempo_salida_bascula")
  salidaBasculaObservaciones  String?  @map("salida_bascula_obs") @db.LongText

  tercerProcesoMol            TercerProcesoMol @relation(fields: [tercerProcesoMolId], references: [id], onDelete: Cascade)

  createdAt                   DateTime @default(now()) @map("created_at")
  updatedAt                   DateTime @updatedAt @map("updated_at")
  
  @@index([tercerProcesoMolId], map: "vueltas_mol_tercer_proceso_mol_id_fkey")
  @@map("vueltas_mol")
}

model ProcesoFinalMol {
  id                          Int      @id @default(autoincrement()) @map("id")
  molId                       Int      @unique @map("mol_id")
  tiempoSalidaPlanta          String?  @map("tiempo_salida_planta")
  salidaPlantaObservaciones   String?  @map("salida_planta_obs") @db.LongText
  porteriaSalida              String   @map("porteria_salida")
  tiempoLlegadaPorteria       String?  @map("tiempo_llegada_porteria")
  llegadaPorteriaObservaciones String?  @map("llegada_porteria_obs") @db.LongText

  molino                         Molino      @relation(fields: [molId], references: [id], onDelete: Cascade)

  createdAt                   DateTime @default(now()) @map("created_at")
  updatedAt                   DateTime @updatedAt @map("updated_at")
  
  @@map("proceso_final_mol")
}

model Actividad {
  id               Int                @id @default(autoincrement()) @map("id")
  fecha            String?           @map("fecha")
  userId           Int                @map("user_id")
  userName         String             @map("user_name")
  totalActividades Int                @map("total_actividades")
  totalDuracion    String             @map("total_duracion")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  
  // Relación con las actividades detalladas
  detalles         DetalleActividad[]
  
  // Relación con el modelo User
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("actividades")
}

model DetalleActividad {
  id                  Int                @id @default(autoincrement()) @map("id")
  actividadId         Int                @map("actividad_id")
  activity            String             @map("activity")
  startTime           String             @map("start_time")
  endTime             String             @map("end_time")
  duration            String             @map("duration")
  responsables        String             @map("responsables")
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")
  
  // Relación con el registro principal
  actividad   Actividad  @relation(fields: [actividadId], references: [id], onDelete: Cascade)

  @@map("detalle_actividades")
}

// BARCOS

model Barco {
  id                        Int       @id @default(autoincrement()) @map("id")
  muelle                    String?   @map("muelle")
  vaporBarco                String?   @map("vapor_barco")
  fechaArribo               String?   @map("fecha_arribo")
  horaArribo                String?   @map("hora_arribo")
  fechaAtraque              String?   @map("fecha_atraque")
  horaAtraque               String?   @map("hora_atraque")
  fechaRecibido            String?    @map("fecha_recibido")
  horaRecibido             String?    @map("hora_recibido")
  fechaInicioOperaciones   String?    @map("fecha_inicio_operaciones")
  horaInicioOperaciones    String?    @map("hora_inicio_operaciones")
  fechaFinOperaciones      String?    @map("fecha_fin_operaciones")
  horaFinOperaciones       String?    @map("hora_fin_operaciones")
  tipoCarga                String?    @db.Text @map("tipo_carga")
  sistemaUtilizado         String?    @db.Text @map("sistema_utilizado")

  bitacoras                Bitacora[]

  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")

   @@map("barcos")
}

model Bitacora {
  id              Int         @id @default(autoincrement()) @map("id")
  fechaInicio     String?     @map("fecha_inicio")
  fecha           String?     @map("fecha")
  fechaCierre     String?     @map("fecha_cierre")
  nombreMuellero  String?     @map("nombre_muellero")
  turnoInicio     String?     @map("turno_inicio")
  turnoFin        String?     @map("turno_fin")
  observaciones   String?     @map("observaciones") @db.LongText

  barcoId         Int?        @map("barco_id")
  barco           Barco?      @relation(fields: [barcoId], references: [id])

  operaciones     Operacion[]

  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@map("bitacoras")
}

model Operacion {
  id           Int         @id @default(autoincrement()) @map("id")
  // Datos de cada operación en la bitácora:
  bodega       String?     @map("bodega")
  inicio       String?     @map("inicio")
  final        String?     @map("final")
  minutos      String?     @map("minutos")
  actividad    String?     @map("actividad") @db.LongText

  bitacoraId   Int         @map("bitacora_id")
  bitacora     Bitacora    @relation(fields: [bitacoraId], references: [id])

  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("operaciones_bitacora")
}

model Equipo {
  id              Int               @id @default(autoincrement()) @map("id")
  userId        Int?             @map("user_id")
  userName        String?          @map("user_name")
  equipo          String            @map("equipo")          // Nombre o identificador del equipo
  operador        String            @map("operador")        // Nombre del operador
  fecha           String            @map("fecha")           // Fecha de la inspección
  hora            String            @map("hora")            // Hora de inicio inspección
  horaDe          String            @map("hora_de")         // Hora de inicio
  horaA           String            @map("hora_a")          // Hora de finalización
  recomendaciones String?           @map("recomendaciones") @db.LongText // Recomendaciones (opcional)
  user           User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  inspecciones    Inspeccion[]     @relation("equipo_inspecciones")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")

  @@map("equipos")
}

model Inspeccion {
  id            Int         @id @default(autoincrement()) @map("id")
  titulo        String      @map("titulo")        // Ej: "Inspección de llantas"
  // Se utiliza un solo campo 'cumple': true indica que se cumple (1) y false que no se cumple (0)
  cumple        Boolean     @default(false) @map("cumple")
  observaciones String?     @map("observaciones") @db.LongText // Observaciones adicionales (opcional)
  equipoId      Int         @map("equipo_id")
  equipo        Equipo      @relation("equipo_inspecciones", fields: [equipoId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@map("inspecciones")
}
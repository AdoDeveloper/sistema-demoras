
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `EmpresaTransporte` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model EmpresaTransporte
 * 
 */
export type EmpresaTransporteModel = runtime.Types.Result.DefaultSelection<Prisma.$EmpresaTransportePayload>

export type AggregateEmpresaTransporte = {
  _count: EmpresaTransporteCountAggregateOutputType | null
  _avg: EmpresaTransporteAvgAggregateOutputType | null
  _sum: EmpresaTransporteSumAggregateOutputType | null
  _min: EmpresaTransporteMinAggregateOutputType | null
  _max: EmpresaTransporteMaxAggregateOutputType | null
}

export type EmpresaTransporteAvgAggregateOutputType = {
  id: number | null
}

export type EmpresaTransporteSumAggregateOutputType = {
  id: number | null
}

export type EmpresaTransporteMinAggregateOutputType = {
  id: number | null
  nombre: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EmpresaTransporteMaxAggregateOutputType = {
  id: number | null
  nombre: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EmpresaTransporteCountAggregateOutputType = {
  id: number
  nombre: number
  motoristas: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type EmpresaTransporteAvgAggregateInputType = {
  id?: true
}

export type EmpresaTransporteSumAggregateInputType = {
  id?: true
}

export type EmpresaTransporteMinAggregateInputType = {
  id?: true
  nombre?: true
  createdAt?: true
  updatedAt?: true
}

export type EmpresaTransporteMaxAggregateInputType = {
  id?: true
  nombre?: true
  createdAt?: true
  updatedAt?: true
}

export type EmpresaTransporteCountAggregateInputType = {
  id?: true
  nombre?: true
  motoristas?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type EmpresaTransporteAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmpresaTransporte to aggregate.
   */
  where?: Prisma.EmpresaTransporteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmpresaTransportes to fetch.
   */
  orderBy?: Prisma.EmpresaTransporteOrderByWithRelationInput | Prisma.EmpresaTransporteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EmpresaTransporteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmpresaTransportes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmpresaTransportes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EmpresaTransportes
  **/
  _count?: true | EmpresaTransporteCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EmpresaTransporteAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EmpresaTransporteSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EmpresaTransporteMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EmpresaTransporteMaxAggregateInputType
}

export type GetEmpresaTransporteAggregateType<T extends EmpresaTransporteAggregateArgs> = {
      [P in keyof T & keyof AggregateEmpresaTransporte]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEmpresaTransporte[P]>
    : Prisma.GetScalarType<T[P], AggregateEmpresaTransporte[P]>
}




export type EmpresaTransporteGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmpresaTransporteWhereInput
  orderBy?: Prisma.EmpresaTransporteOrderByWithAggregationInput | Prisma.EmpresaTransporteOrderByWithAggregationInput[]
  by: Prisma.EmpresaTransporteScalarFieldEnum[] | Prisma.EmpresaTransporteScalarFieldEnum
  having?: Prisma.EmpresaTransporteScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EmpresaTransporteCountAggregateInputType | true
  _avg?: EmpresaTransporteAvgAggregateInputType
  _sum?: EmpresaTransporteSumAggregateInputType
  _min?: EmpresaTransporteMinAggregateInputType
  _max?: EmpresaTransporteMaxAggregateInputType
}

export type EmpresaTransporteGroupByOutputType = {
  id: number
  nombre: string
  motoristas: runtime.JsonValue | null
  createdAt: Date
  updatedAt: Date
  _count: EmpresaTransporteCountAggregateOutputType | null
  _avg: EmpresaTransporteAvgAggregateOutputType | null
  _sum: EmpresaTransporteSumAggregateOutputType | null
  _min: EmpresaTransporteMinAggregateOutputType | null
  _max: EmpresaTransporteMaxAggregateOutputType | null
}

type GetEmpresaTransporteGroupByPayload<T extends EmpresaTransporteGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EmpresaTransporteGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EmpresaTransporteGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EmpresaTransporteGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EmpresaTransporteGroupByOutputType[P]>
      }
    >
  > 



export type EmpresaTransporteWhereInput = {
  AND?: Prisma.EmpresaTransporteWhereInput | Prisma.EmpresaTransporteWhereInput[]
  OR?: Prisma.EmpresaTransporteWhereInput[]
  NOT?: Prisma.EmpresaTransporteWhereInput | Prisma.EmpresaTransporteWhereInput[]
  id?: Prisma.IntFilter<"EmpresaTransporte"> | number
  nombre?: Prisma.StringFilter<"EmpresaTransporte"> | string
  motoristas?: Prisma.JsonNullableFilter<"EmpresaTransporte">
  createdAt?: Prisma.DateTimeFilter<"EmpresaTransporte"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EmpresaTransporte"> | Date | string
}

export type EmpresaTransporteOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  motoristas?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _relevance?: Prisma.EmpresaTransporteOrderByRelevanceInput
}

export type EmpresaTransporteWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.EmpresaTransporteWhereInput | Prisma.EmpresaTransporteWhereInput[]
  OR?: Prisma.EmpresaTransporteWhereInput[]
  NOT?: Prisma.EmpresaTransporteWhereInput | Prisma.EmpresaTransporteWhereInput[]
  nombre?: Prisma.StringFilter<"EmpresaTransporte"> | string
  motoristas?: Prisma.JsonNullableFilter<"EmpresaTransporte">
  createdAt?: Prisma.DateTimeFilter<"EmpresaTransporte"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EmpresaTransporte"> | Date | string
}, "id">

export type EmpresaTransporteOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  motoristas?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.EmpresaTransporteCountOrderByAggregateInput
  _avg?: Prisma.EmpresaTransporteAvgOrderByAggregateInput
  _max?: Prisma.EmpresaTransporteMaxOrderByAggregateInput
  _min?: Prisma.EmpresaTransporteMinOrderByAggregateInput
  _sum?: Prisma.EmpresaTransporteSumOrderByAggregateInput
}

export type EmpresaTransporteScalarWhereWithAggregatesInput = {
  AND?: Prisma.EmpresaTransporteScalarWhereWithAggregatesInput | Prisma.EmpresaTransporteScalarWhereWithAggregatesInput[]
  OR?: Prisma.EmpresaTransporteScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EmpresaTransporteScalarWhereWithAggregatesInput | Prisma.EmpresaTransporteScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"EmpresaTransporte"> | number
  nombre?: Prisma.StringWithAggregatesFilter<"EmpresaTransporte"> | string
  motoristas?: Prisma.JsonNullableWithAggregatesFilter<"EmpresaTransporte">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"EmpresaTransporte"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"EmpresaTransporte"> | Date | string
}

export type EmpresaTransporteCreateInput = {
  nombre: string
  motoristas?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmpresaTransporteUncheckedCreateInput = {
  id?: number
  nombre: string
  motoristas?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmpresaTransporteUpdateInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  motoristas?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmpresaTransporteUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  motoristas?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmpresaTransporteCreateManyInput = {
  id?: number
  nombre: string
  motoristas?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmpresaTransporteUpdateManyMutationInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  motoristas?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmpresaTransporteUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  motoristas?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmpresaTransporteOrderByRelevanceInput = {
  fields: Prisma.EmpresaTransporteOrderByRelevanceFieldEnum | Prisma.EmpresaTransporteOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type EmpresaTransporteCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  motoristas?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmpresaTransporteAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type EmpresaTransporteMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmpresaTransporteMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmpresaTransporteSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type EmpresaTransporteSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
  motoristas?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["empresaTransporte"]>



export type EmpresaTransporteSelectScalar = {
  id?: boolean
  nombre?: boolean
  motoristas?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type EmpresaTransporteOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nombre" | "motoristas" | "createdAt" | "updatedAt", ExtArgs["result"]["empresaTransporte"]>

export type $EmpresaTransportePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EmpresaTransporte"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    nombre: string
    motoristas: runtime.JsonValue | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["empresaTransporte"]>
  composites: {}
}

export type EmpresaTransporteGetPayload<S extends boolean | null | undefined | EmpresaTransporteDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EmpresaTransportePayload, S>

export type EmpresaTransporteCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EmpresaTransporteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EmpresaTransporteCountAggregateInputType | true
  }

export interface EmpresaTransporteDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmpresaTransporte'], meta: { name: 'EmpresaTransporte' } }
  /**
   * Find zero or one EmpresaTransporte that matches the filter.
   * @param {EmpresaTransporteFindUniqueArgs} args - Arguments to find a EmpresaTransporte
   * @example
   * // Get one EmpresaTransporte
   * const empresaTransporte = await prisma.empresaTransporte.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EmpresaTransporteFindUniqueArgs>(args: Prisma.SelectSubset<T, EmpresaTransporteFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EmpresaTransporteClient<runtime.Types.Result.GetResult<Prisma.$EmpresaTransportePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EmpresaTransporte that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EmpresaTransporteFindUniqueOrThrowArgs} args - Arguments to find a EmpresaTransporte
   * @example
   * // Get one EmpresaTransporte
   * const empresaTransporte = await prisma.empresaTransporte.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EmpresaTransporteFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EmpresaTransporteFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmpresaTransporteClient<runtime.Types.Result.GetResult<Prisma.$EmpresaTransportePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmpresaTransporte that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmpresaTransporteFindFirstArgs} args - Arguments to find a EmpresaTransporte
   * @example
   * // Get one EmpresaTransporte
   * const empresaTransporte = await prisma.empresaTransporte.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EmpresaTransporteFindFirstArgs>(args?: Prisma.SelectSubset<T, EmpresaTransporteFindFirstArgs<ExtArgs>>): Prisma.Prisma__EmpresaTransporteClient<runtime.Types.Result.GetResult<Prisma.$EmpresaTransportePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmpresaTransporte that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmpresaTransporteFindFirstOrThrowArgs} args - Arguments to find a EmpresaTransporte
   * @example
   * // Get one EmpresaTransporte
   * const empresaTransporte = await prisma.empresaTransporte.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EmpresaTransporteFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EmpresaTransporteFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmpresaTransporteClient<runtime.Types.Result.GetResult<Prisma.$EmpresaTransportePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EmpresaTransportes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmpresaTransporteFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EmpresaTransportes
   * const empresaTransportes = await prisma.empresaTransporte.findMany()
   * 
   * // Get first 10 EmpresaTransportes
   * const empresaTransportes = await prisma.empresaTransporte.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const empresaTransporteWithIdOnly = await prisma.empresaTransporte.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EmpresaTransporteFindManyArgs>(args?: Prisma.SelectSubset<T, EmpresaTransporteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmpresaTransportePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EmpresaTransporte.
   * @param {EmpresaTransporteCreateArgs} args - Arguments to create a EmpresaTransporte.
   * @example
   * // Create one EmpresaTransporte
   * const EmpresaTransporte = await prisma.empresaTransporte.create({
   *   data: {
   *     // ... data to create a EmpresaTransporte
   *   }
   * })
   * 
   */
  create<T extends EmpresaTransporteCreateArgs>(args: Prisma.SelectSubset<T, EmpresaTransporteCreateArgs<ExtArgs>>): Prisma.Prisma__EmpresaTransporteClient<runtime.Types.Result.GetResult<Prisma.$EmpresaTransportePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EmpresaTransportes.
   * @param {EmpresaTransporteCreateManyArgs} args - Arguments to create many EmpresaTransportes.
   * @example
   * // Create many EmpresaTransportes
   * const empresaTransporte = await prisma.empresaTransporte.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EmpresaTransporteCreateManyArgs>(args?: Prisma.SelectSubset<T, EmpresaTransporteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a EmpresaTransporte.
   * @param {EmpresaTransporteDeleteArgs} args - Arguments to delete one EmpresaTransporte.
   * @example
   * // Delete one EmpresaTransporte
   * const EmpresaTransporte = await prisma.empresaTransporte.delete({
   *   where: {
   *     // ... filter to delete one EmpresaTransporte
   *   }
   * })
   * 
   */
  delete<T extends EmpresaTransporteDeleteArgs>(args: Prisma.SelectSubset<T, EmpresaTransporteDeleteArgs<ExtArgs>>): Prisma.Prisma__EmpresaTransporteClient<runtime.Types.Result.GetResult<Prisma.$EmpresaTransportePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EmpresaTransporte.
   * @param {EmpresaTransporteUpdateArgs} args - Arguments to update one EmpresaTransporte.
   * @example
   * // Update one EmpresaTransporte
   * const empresaTransporte = await prisma.empresaTransporte.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EmpresaTransporteUpdateArgs>(args: Prisma.SelectSubset<T, EmpresaTransporteUpdateArgs<ExtArgs>>): Prisma.Prisma__EmpresaTransporteClient<runtime.Types.Result.GetResult<Prisma.$EmpresaTransportePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EmpresaTransportes.
   * @param {EmpresaTransporteDeleteManyArgs} args - Arguments to filter EmpresaTransportes to delete.
   * @example
   * // Delete a few EmpresaTransportes
   * const { count } = await prisma.empresaTransporte.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EmpresaTransporteDeleteManyArgs>(args?: Prisma.SelectSubset<T, EmpresaTransporteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmpresaTransportes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmpresaTransporteUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EmpresaTransportes
   * const empresaTransporte = await prisma.empresaTransporte.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EmpresaTransporteUpdateManyArgs>(args: Prisma.SelectSubset<T, EmpresaTransporteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one EmpresaTransporte.
   * @param {EmpresaTransporteUpsertArgs} args - Arguments to update or create a EmpresaTransporte.
   * @example
   * // Update or create a EmpresaTransporte
   * const empresaTransporte = await prisma.empresaTransporte.upsert({
   *   create: {
   *     // ... data to create a EmpresaTransporte
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EmpresaTransporte we want to update
   *   }
   * })
   */
  upsert<T extends EmpresaTransporteUpsertArgs>(args: Prisma.SelectSubset<T, EmpresaTransporteUpsertArgs<ExtArgs>>): Prisma.Prisma__EmpresaTransporteClient<runtime.Types.Result.GetResult<Prisma.$EmpresaTransportePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EmpresaTransportes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmpresaTransporteCountArgs} args - Arguments to filter EmpresaTransportes to count.
   * @example
   * // Count the number of EmpresaTransportes
   * const count = await prisma.empresaTransporte.count({
   *   where: {
   *     // ... the filter for the EmpresaTransportes we want to count
   *   }
   * })
  **/
  count<T extends EmpresaTransporteCountArgs>(
    args?: Prisma.Subset<T, EmpresaTransporteCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EmpresaTransporteCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EmpresaTransporte.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmpresaTransporteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EmpresaTransporteAggregateArgs>(args: Prisma.Subset<T, EmpresaTransporteAggregateArgs>): Prisma.PrismaPromise<GetEmpresaTransporteAggregateType<T>>

  /**
   * Group by EmpresaTransporte.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmpresaTransporteGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EmpresaTransporteGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EmpresaTransporteGroupByArgs['orderBy'] }
      : { orderBy?: EmpresaTransporteGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EmpresaTransporteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmpresaTransporteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EmpresaTransporte model
 */
readonly fields: EmpresaTransporteFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EmpresaTransporte.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EmpresaTransporteClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EmpresaTransporte model
 */
export interface EmpresaTransporteFieldRefs {
  readonly id: Prisma.FieldRef<"EmpresaTransporte", 'Int'>
  readonly nombre: Prisma.FieldRef<"EmpresaTransporte", 'String'>
  readonly motoristas: Prisma.FieldRef<"EmpresaTransporte", 'Json'>
  readonly createdAt: Prisma.FieldRef<"EmpresaTransporte", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"EmpresaTransporte", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EmpresaTransporte findUnique
 */
export type EmpresaTransporteFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmpresaTransporte
   */
  select?: Prisma.EmpresaTransporteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmpresaTransporte
   */
  omit?: Prisma.EmpresaTransporteOmit<ExtArgs> | null
  /**
   * Filter, which EmpresaTransporte to fetch.
   */
  where: Prisma.EmpresaTransporteWhereUniqueInput
}

/**
 * EmpresaTransporte findUniqueOrThrow
 */
export type EmpresaTransporteFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmpresaTransporte
   */
  select?: Prisma.EmpresaTransporteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmpresaTransporte
   */
  omit?: Prisma.EmpresaTransporteOmit<ExtArgs> | null
  /**
   * Filter, which EmpresaTransporte to fetch.
   */
  where: Prisma.EmpresaTransporteWhereUniqueInput
}

/**
 * EmpresaTransporte findFirst
 */
export type EmpresaTransporteFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmpresaTransporte
   */
  select?: Prisma.EmpresaTransporteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmpresaTransporte
   */
  omit?: Prisma.EmpresaTransporteOmit<ExtArgs> | null
  /**
   * Filter, which EmpresaTransporte to fetch.
   */
  where?: Prisma.EmpresaTransporteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmpresaTransportes to fetch.
   */
  orderBy?: Prisma.EmpresaTransporteOrderByWithRelationInput | Prisma.EmpresaTransporteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmpresaTransportes.
   */
  cursor?: Prisma.EmpresaTransporteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmpresaTransportes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmpresaTransportes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmpresaTransportes.
   */
  distinct?: Prisma.EmpresaTransporteScalarFieldEnum | Prisma.EmpresaTransporteScalarFieldEnum[]
}

/**
 * EmpresaTransporte findFirstOrThrow
 */
export type EmpresaTransporteFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmpresaTransporte
   */
  select?: Prisma.EmpresaTransporteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmpresaTransporte
   */
  omit?: Prisma.EmpresaTransporteOmit<ExtArgs> | null
  /**
   * Filter, which EmpresaTransporte to fetch.
   */
  where?: Prisma.EmpresaTransporteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmpresaTransportes to fetch.
   */
  orderBy?: Prisma.EmpresaTransporteOrderByWithRelationInput | Prisma.EmpresaTransporteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmpresaTransportes.
   */
  cursor?: Prisma.EmpresaTransporteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmpresaTransportes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmpresaTransportes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmpresaTransportes.
   */
  distinct?: Prisma.EmpresaTransporteScalarFieldEnum | Prisma.EmpresaTransporteScalarFieldEnum[]
}

/**
 * EmpresaTransporte findMany
 */
export type EmpresaTransporteFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmpresaTransporte
   */
  select?: Prisma.EmpresaTransporteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmpresaTransporte
   */
  omit?: Prisma.EmpresaTransporteOmit<ExtArgs> | null
  /**
   * Filter, which EmpresaTransportes to fetch.
   */
  where?: Prisma.EmpresaTransporteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmpresaTransportes to fetch.
   */
  orderBy?: Prisma.EmpresaTransporteOrderByWithRelationInput | Prisma.EmpresaTransporteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EmpresaTransportes.
   */
  cursor?: Prisma.EmpresaTransporteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmpresaTransportes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmpresaTransportes.
   */
  skip?: number
  distinct?: Prisma.EmpresaTransporteScalarFieldEnum | Prisma.EmpresaTransporteScalarFieldEnum[]
}

/**
 * EmpresaTransporte create
 */
export type EmpresaTransporteCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmpresaTransporte
   */
  select?: Prisma.EmpresaTransporteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmpresaTransporte
   */
  omit?: Prisma.EmpresaTransporteOmit<ExtArgs> | null
  /**
   * The data needed to create a EmpresaTransporte.
   */
  data: Prisma.XOR<Prisma.EmpresaTransporteCreateInput, Prisma.EmpresaTransporteUncheckedCreateInput>
}

/**
 * EmpresaTransporte createMany
 */
export type EmpresaTransporteCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EmpresaTransportes.
   */
  data: Prisma.EmpresaTransporteCreateManyInput | Prisma.EmpresaTransporteCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EmpresaTransporte update
 */
export type EmpresaTransporteUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmpresaTransporte
   */
  select?: Prisma.EmpresaTransporteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmpresaTransporte
   */
  omit?: Prisma.EmpresaTransporteOmit<ExtArgs> | null
  /**
   * The data needed to update a EmpresaTransporte.
   */
  data: Prisma.XOR<Prisma.EmpresaTransporteUpdateInput, Prisma.EmpresaTransporteUncheckedUpdateInput>
  /**
   * Choose, which EmpresaTransporte to update.
   */
  where: Prisma.EmpresaTransporteWhereUniqueInput
}

/**
 * EmpresaTransporte updateMany
 */
export type EmpresaTransporteUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EmpresaTransportes.
   */
  data: Prisma.XOR<Prisma.EmpresaTransporteUpdateManyMutationInput, Prisma.EmpresaTransporteUncheckedUpdateManyInput>
  /**
   * Filter which EmpresaTransportes to update
   */
  where?: Prisma.EmpresaTransporteWhereInput
  /**
   * Limit how many EmpresaTransportes to update.
   */
  limit?: number
}

/**
 * EmpresaTransporte upsert
 */
export type EmpresaTransporteUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmpresaTransporte
   */
  select?: Prisma.EmpresaTransporteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmpresaTransporte
   */
  omit?: Prisma.EmpresaTransporteOmit<ExtArgs> | null
  /**
   * The filter to search for the EmpresaTransporte to update in case it exists.
   */
  where: Prisma.EmpresaTransporteWhereUniqueInput
  /**
   * In case the EmpresaTransporte found by the `where` argument doesn't exist, create a new EmpresaTransporte with this data.
   */
  create: Prisma.XOR<Prisma.EmpresaTransporteCreateInput, Prisma.EmpresaTransporteUncheckedCreateInput>
  /**
   * In case the EmpresaTransporte was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EmpresaTransporteUpdateInput, Prisma.EmpresaTransporteUncheckedUpdateInput>
}

/**
 * EmpresaTransporte delete
 */
export type EmpresaTransporteDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmpresaTransporte
   */
  select?: Prisma.EmpresaTransporteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmpresaTransporte
   */
  omit?: Prisma.EmpresaTransporteOmit<ExtArgs> | null
  /**
   * Filter which EmpresaTransporte to delete.
   */
  where: Prisma.EmpresaTransporteWhereUniqueInput
}

/**
 * EmpresaTransporte deleteMany
 */
export type EmpresaTransporteDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmpresaTransportes to delete
   */
  where?: Prisma.EmpresaTransporteWhereInput
  /**
   * Limit how many EmpresaTransportes to delete.
   */
  limit?: number
}

/**
 * EmpresaTransporte without action
 */
export type EmpresaTransporteDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmpresaTransporte
   */
  select?: Prisma.EmpresaTransporteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmpresaTransporte
   */
  omit?: Prisma.EmpresaTransporteOmit<ExtArgs> | null
}

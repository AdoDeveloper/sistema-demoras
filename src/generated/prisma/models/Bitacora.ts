
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `Bitacora` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Bitacora
 * 
 */
export type BitacoraModel = runtime.Types.Result.DefaultSelection<Prisma.$BitacoraPayload>

export type AggregateBitacora = {
  _count: BitacoraCountAggregateOutputType | null
  _avg: BitacoraAvgAggregateOutputType | null
  _sum: BitacoraSumAggregateOutputType | null
  _min: BitacoraMinAggregateOutputType | null
  _max: BitacoraMaxAggregateOutputType | null
}

export type BitacoraAvgAggregateOutputType = {
  id: number | null
  barcoId: number | null
}

export type BitacoraSumAggregateOutputType = {
  id: number | null
  barcoId: number | null
}

export type BitacoraMinAggregateOutputType = {
  id: number | null
  fechaInicio: string | null
  fecha: string | null
  fechaCierre: string | null
  nombreMuellero: string | null
  turnoInicio: string | null
  turnoFin: string | null
  observaciones: string | null
  barcoId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BitacoraMaxAggregateOutputType = {
  id: number | null
  fechaInicio: string | null
  fecha: string | null
  fechaCierre: string | null
  nombreMuellero: string | null
  turnoInicio: string | null
  turnoFin: string | null
  observaciones: string | null
  barcoId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BitacoraCountAggregateOutputType = {
  id: number
  fechaInicio: number
  fecha: number
  fechaCierre: number
  nombreMuellero: number
  turnoInicio: number
  turnoFin: number
  observaciones: number
  barcoId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type BitacoraAvgAggregateInputType = {
  id?: true
  barcoId?: true
}

export type BitacoraSumAggregateInputType = {
  id?: true
  barcoId?: true
}

export type BitacoraMinAggregateInputType = {
  id?: true
  fechaInicio?: true
  fecha?: true
  fechaCierre?: true
  nombreMuellero?: true
  turnoInicio?: true
  turnoFin?: true
  observaciones?: true
  barcoId?: true
  createdAt?: true
  updatedAt?: true
}

export type BitacoraMaxAggregateInputType = {
  id?: true
  fechaInicio?: true
  fecha?: true
  fechaCierre?: true
  nombreMuellero?: true
  turnoInicio?: true
  turnoFin?: true
  observaciones?: true
  barcoId?: true
  createdAt?: true
  updatedAt?: true
}

export type BitacoraCountAggregateInputType = {
  id?: true
  fechaInicio?: true
  fecha?: true
  fechaCierre?: true
  nombreMuellero?: true
  turnoInicio?: true
  turnoFin?: true
  observaciones?: true
  barcoId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type BitacoraAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Bitacora to aggregate.
   */
  where?: Prisma.BitacoraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bitacoras to fetch.
   */
  orderBy?: Prisma.BitacoraOrderByWithRelationInput | Prisma.BitacoraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BitacoraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bitacoras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bitacoras.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Bitacoras
  **/
  _count?: true | BitacoraCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BitacoraAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BitacoraSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BitacoraMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BitacoraMaxAggregateInputType
}

export type GetBitacoraAggregateType<T extends BitacoraAggregateArgs> = {
      [P in keyof T & keyof AggregateBitacora]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBitacora[P]>
    : Prisma.GetScalarType<T[P], AggregateBitacora[P]>
}




export type BitacoraGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BitacoraWhereInput
  orderBy?: Prisma.BitacoraOrderByWithAggregationInput | Prisma.BitacoraOrderByWithAggregationInput[]
  by: Prisma.BitacoraScalarFieldEnum[] | Prisma.BitacoraScalarFieldEnum
  having?: Prisma.BitacoraScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BitacoraCountAggregateInputType | true
  _avg?: BitacoraAvgAggregateInputType
  _sum?: BitacoraSumAggregateInputType
  _min?: BitacoraMinAggregateInputType
  _max?: BitacoraMaxAggregateInputType
}

export type BitacoraGroupByOutputType = {
  id: number
  fechaInicio: string | null
  fecha: string | null
  fechaCierre: string | null
  nombreMuellero: string | null
  turnoInicio: string | null
  turnoFin: string | null
  observaciones: string | null
  barcoId: number | null
  createdAt: Date
  updatedAt: Date
  _count: BitacoraCountAggregateOutputType | null
  _avg: BitacoraAvgAggregateOutputType | null
  _sum: BitacoraSumAggregateOutputType | null
  _min: BitacoraMinAggregateOutputType | null
  _max: BitacoraMaxAggregateOutputType | null
}

type GetBitacoraGroupByPayload<T extends BitacoraGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BitacoraGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BitacoraGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BitacoraGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BitacoraGroupByOutputType[P]>
      }
    >
  > 



export type BitacoraWhereInput = {
  AND?: Prisma.BitacoraWhereInput | Prisma.BitacoraWhereInput[]
  OR?: Prisma.BitacoraWhereInput[]
  NOT?: Prisma.BitacoraWhereInput | Prisma.BitacoraWhereInput[]
  id?: Prisma.IntFilter<"Bitacora"> | number
  fechaInicio?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  fecha?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  fechaCierre?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  nombreMuellero?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  turnoInicio?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  turnoFin?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  observaciones?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  barcoId?: Prisma.IntNullableFilter<"Bitacora"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Bitacora"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Bitacora"> | Date | string
  barco?: Prisma.XOR<Prisma.BarcoNullableScalarRelationFilter, Prisma.BarcoWhereInput> | null
  operaciones?: Prisma.OperacionListRelationFilter
}

export type BitacoraOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  fechaInicio?: Prisma.SortOrderInput | Prisma.SortOrder
  fecha?: Prisma.SortOrderInput | Prisma.SortOrder
  fechaCierre?: Prisma.SortOrderInput | Prisma.SortOrder
  nombreMuellero?: Prisma.SortOrderInput | Prisma.SortOrder
  turnoInicio?: Prisma.SortOrderInput | Prisma.SortOrder
  turnoFin?: Prisma.SortOrderInput | Prisma.SortOrder
  observaciones?: Prisma.SortOrderInput | Prisma.SortOrder
  barcoId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  barco?: Prisma.BarcoOrderByWithRelationInput
  operaciones?: Prisma.OperacionOrderByRelationAggregateInput
  _relevance?: Prisma.BitacoraOrderByRelevanceInput
}

export type BitacoraWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.BitacoraWhereInput | Prisma.BitacoraWhereInput[]
  OR?: Prisma.BitacoraWhereInput[]
  NOT?: Prisma.BitacoraWhereInput | Prisma.BitacoraWhereInput[]
  fechaInicio?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  fecha?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  fechaCierre?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  nombreMuellero?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  turnoInicio?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  turnoFin?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  observaciones?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  barcoId?: Prisma.IntNullableFilter<"Bitacora"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Bitacora"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Bitacora"> | Date | string
  barco?: Prisma.XOR<Prisma.BarcoNullableScalarRelationFilter, Prisma.BarcoWhereInput> | null
  operaciones?: Prisma.OperacionListRelationFilter
}, "id">

export type BitacoraOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  fechaInicio?: Prisma.SortOrderInput | Prisma.SortOrder
  fecha?: Prisma.SortOrderInput | Prisma.SortOrder
  fechaCierre?: Prisma.SortOrderInput | Prisma.SortOrder
  nombreMuellero?: Prisma.SortOrderInput | Prisma.SortOrder
  turnoInicio?: Prisma.SortOrderInput | Prisma.SortOrder
  turnoFin?: Prisma.SortOrderInput | Prisma.SortOrder
  observaciones?: Prisma.SortOrderInput | Prisma.SortOrder
  barcoId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.BitacoraCountOrderByAggregateInput
  _avg?: Prisma.BitacoraAvgOrderByAggregateInput
  _max?: Prisma.BitacoraMaxOrderByAggregateInput
  _min?: Prisma.BitacoraMinOrderByAggregateInput
  _sum?: Prisma.BitacoraSumOrderByAggregateInput
}

export type BitacoraScalarWhereWithAggregatesInput = {
  AND?: Prisma.BitacoraScalarWhereWithAggregatesInput | Prisma.BitacoraScalarWhereWithAggregatesInput[]
  OR?: Prisma.BitacoraScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BitacoraScalarWhereWithAggregatesInput | Prisma.BitacoraScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Bitacora"> | number
  fechaInicio?: Prisma.StringNullableWithAggregatesFilter<"Bitacora"> | string | null
  fecha?: Prisma.StringNullableWithAggregatesFilter<"Bitacora"> | string | null
  fechaCierre?: Prisma.StringNullableWithAggregatesFilter<"Bitacora"> | string | null
  nombreMuellero?: Prisma.StringNullableWithAggregatesFilter<"Bitacora"> | string | null
  turnoInicio?: Prisma.StringNullableWithAggregatesFilter<"Bitacora"> | string | null
  turnoFin?: Prisma.StringNullableWithAggregatesFilter<"Bitacora"> | string | null
  observaciones?: Prisma.StringNullableWithAggregatesFilter<"Bitacora"> | string | null
  barcoId?: Prisma.IntNullableWithAggregatesFilter<"Bitacora"> | number | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Bitacora"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Bitacora"> | Date | string
}

export type BitacoraCreateInput = {
  fechaInicio?: string | null
  fecha?: string | null
  fechaCierre?: string | null
  nombreMuellero?: string | null
  turnoInicio?: string | null
  turnoFin?: string | null
  observaciones?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  barco?: Prisma.BarcoCreateNestedOneWithoutBitacorasInput
  operaciones?: Prisma.OperacionCreateNestedManyWithoutBitacoraInput
}

export type BitacoraUncheckedCreateInput = {
  id?: number
  fechaInicio?: string | null
  fecha?: string | null
  fechaCierre?: string | null
  nombreMuellero?: string | null
  turnoInicio?: string | null
  turnoFin?: string | null
  observaciones?: string | null
  barcoId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  operaciones?: Prisma.OperacionUncheckedCreateNestedManyWithoutBitacoraInput
}

export type BitacoraUpdateInput = {
  fechaInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fecha?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fechaCierre?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nombreMuellero?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoFin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  observaciones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  barco?: Prisma.BarcoUpdateOneWithoutBitacorasNestedInput
  operaciones?: Prisma.OperacionUpdateManyWithoutBitacoraNestedInput
}

export type BitacoraUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  fechaInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fecha?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fechaCierre?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nombreMuellero?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoFin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  observaciones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  barcoId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  operaciones?: Prisma.OperacionUncheckedUpdateManyWithoutBitacoraNestedInput
}

export type BitacoraCreateManyInput = {
  id?: number
  fechaInicio?: string | null
  fecha?: string | null
  fechaCierre?: string | null
  nombreMuellero?: string | null
  turnoInicio?: string | null
  turnoFin?: string | null
  observaciones?: string | null
  barcoId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BitacoraUpdateManyMutationInput = {
  fechaInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fecha?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fechaCierre?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nombreMuellero?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoFin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  observaciones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BitacoraUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  fechaInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fecha?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fechaCierre?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nombreMuellero?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoFin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  observaciones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  barcoId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BitacoraListRelationFilter = {
  every?: Prisma.BitacoraWhereInput
  some?: Prisma.BitacoraWhereInput
  none?: Prisma.BitacoraWhereInput
}

export type BitacoraOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BitacoraOrderByRelevanceInput = {
  fields: Prisma.BitacoraOrderByRelevanceFieldEnum | Prisma.BitacoraOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type BitacoraCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fechaInicio?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  fechaCierre?: Prisma.SortOrder
  nombreMuellero?: Prisma.SortOrder
  turnoInicio?: Prisma.SortOrder
  turnoFin?: Prisma.SortOrder
  observaciones?: Prisma.SortOrder
  barcoId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BitacoraAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  barcoId?: Prisma.SortOrder
}

export type BitacoraMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fechaInicio?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  fechaCierre?: Prisma.SortOrder
  nombreMuellero?: Prisma.SortOrder
  turnoInicio?: Prisma.SortOrder
  turnoFin?: Prisma.SortOrder
  observaciones?: Prisma.SortOrder
  barcoId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BitacoraMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fechaInicio?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  fechaCierre?: Prisma.SortOrder
  nombreMuellero?: Prisma.SortOrder
  turnoInicio?: Prisma.SortOrder
  turnoFin?: Prisma.SortOrder
  observaciones?: Prisma.SortOrder
  barcoId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BitacoraSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  barcoId?: Prisma.SortOrder
}

export type BitacoraScalarRelationFilter = {
  is?: Prisma.BitacoraWhereInput
  isNot?: Prisma.BitacoraWhereInput
}

export type BitacoraCreateNestedManyWithoutBarcoInput = {
  create?: Prisma.XOR<Prisma.BitacoraCreateWithoutBarcoInput, Prisma.BitacoraUncheckedCreateWithoutBarcoInput> | Prisma.BitacoraCreateWithoutBarcoInput[] | Prisma.BitacoraUncheckedCreateWithoutBarcoInput[]
  connectOrCreate?: Prisma.BitacoraCreateOrConnectWithoutBarcoInput | Prisma.BitacoraCreateOrConnectWithoutBarcoInput[]
  createMany?: Prisma.BitacoraCreateManyBarcoInputEnvelope
  connect?: Prisma.BitacoraWhereUniqueInput | Prisma.BitacoraWhereUniqueInput[]
}

export type BitacoraUncheckedCreateNestedManyWithoutBarcoInput = {
  create?: Prisma.XOR<Prisma.BitacoraCreateWithoutBarcoInput, Prisma.BitacoraUncheckedCreateWithoutBarcoInput> | Prisma.BitacoraCreateWithoutBarcoInput[] | Prisma.BitacoraUncheckedCreateWithoutBarcoInput[]
  connectOrCreate?: Prisma.BitacoraCreateOrConnectWithoutBarcoInput | Prisma.BitacoraCreateOrConnectWithoutBarcoInput[]
  createMany?: Prisma.BitacoraCreateManyBarcoInputEnvelope
  connect?: Prisma.BitacoraWhereUniqueInput | Prisma.BitacoraWhereUniqueInput[]
}

export type BitacoraUpdateManyWithoutBarcoNestedInput = {
  create?: Prisma.XOR<Prisma.BitacoraCreateWithoutBarcoInput, Prisma.BitacoraUncheckedCreateWithoutBarcoInput> | Prisma.BitacoraCreateWithoutBarcoInput[] | Prisma.BitacoraUncheckedCreateWithoutBarcoInput[]
  connectOrCreate?: Prisma.BitacoraCreateOrConnectWithoutBarcoInput | Prisma.BitacoraCreateOrConnectWithoutBarcoInput[]
  upsert?: Prisma.BitacoraUpsertWithWhereUniqueWithoutBarcoInput | Prisma.BitacoraUpsertWithWhereUniqueWithoutBarcoInput[]
  createMany?: Prisma.BitacoraCreateManyBarcoInputEnvelope
  set?: Prisma.BitacoraWhereUniqueInput | Prisma.BitacoraWhereUniqueInput[]
  disconnect?: Prisma.BitacoraWhereUniqueInput | Prisma.BitacoraWhereUniqueInput[]
  delete?: Prisma.BitacoraWhereUniqueInput | Prisma.BitacoraWhereUniqueInput[]
  connect?: Prisma.BitacoraWhereUniqueInput | Prisma.BitacoraWhereUniqueInput[]
  update?: Prisma.BitacoraUpdateWithWhereUniqueWithoutBarcoInput | Prisma.BitacoraUpdateWithWhereUniqueWithoutBarcoInput[]
  updateMany?: Prisma.BitacoraUpdateManyWithWhereWithoutBarcoInput | Prisma.BitacoraUpdateManyWithWhereWithoutBarcoInput[]
  deleteMany?: Prisma.BitacoraScalarWhereInput | Prisma.BitacoraScalarWhereInput[]
}

export type BitacoraUncheckedUpdateManyWithoutBarcoNestedInput = {
  create?: Prisma.XOR<Prisma.BitacoraCreateWithoutBarcoInput, Prisma.BitacoraUncheckedCreateWithoutBarcoInput> | Prisma.BitacoraCreateWithoutBarcoInput[] | Prisma.BitacoraUncheckedCreateWithoutBarcoInput[]
  connectOrCreate?: Prisma.BitacoraCreateOrConnectWithoutBarcoInput | Prisma.BitacoraCreateOrConnectWithoutBarcoInput[]
  upsert?: Prisma.BitacoraUpsertWithWhereUniqueWithoutBarcoInput | Prisma.BitacoraUpsertWithWhereUniqueWithoutBarcoInput[]
  createMany?: Prisma.BitacoraCreateManyBarcoInputEnvelope
  set?: Prisma.BitacoraWhereUniqueInput | Prisma.BitacoraWhereUniqueInput[]
  disconnect?: Prisma.BitacoraWhereUniqueInput | Prisma.BitacoraWhereUniqueInput[]
  delete?: Prisma.BitacoraWhereUniqueInput | Prisma.BitacoraWhereUniqueInput[]
  connect?: Prisma.BitacoraWhereUniqueInput | Prisma.BitacoraWhereUniqueInput[]
  update?: Prisma.BitacoraUpdateWithWhereUniqueWithoutBarcoInput | Prisma.BitacoraUpdateWithWhereUniqueWithoutBarcoInput[]
  updateMany?: Prisma.BitacoraUpdateManyWithWhereWithoutBarcoInput | Prisma.BitacoraUpdateManyWithWhereWithoutBarcoInput[]
  deleteMany?: Prisma.BitacoraScalarWhereInput | Prisma.BitacoraScalarWhereInput[]
}

export type BitacoraCreateNestedOneWithoutOperacionesInput = {
  create?: Prisma.XOR<Prisma.BitacoraCreateWithoutOperacionesInput, Prisma.BitacoraUncheckedCreateWithoutOperacionesInput>
  connectOrCreate?: Prisma.BitacoraCreateOrConnectWithoutOperacionesInput
  connect?: Prisma.BitacoraWhereUniqueInput
}

export type BitacoraUpdateOneRequiredWithoutOperacionesNestedInput = {
  create?: Prisma.XOR<Prisma.BitacoraCreateWithoutOperacionesInput, Prisma.BitacoraUncheckedCreateWithoutOperacionesInput>
  connectOrCreate?: Prisma.BitacoraCreateOrConnectWithoutOperacionesInput
  upsert?: Prisma.BitacoraUpsertWithoutOperacionesInput
  connect?: Prisma.BitacoraWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BitacoraUpdateToOneWithWhereWithoutOperacionesInput, Prisma.BitacoraUpdateWithoutOperacionesInput>, Prisma.BitacoraUncheckedUpdateWithoutOperacionesInput>
}

export type BitacoraCreateWithoutBarcoInput = {
  fechaInicio?: string | null
  fecha?: string | null
  fechaCierre?: string | null
  nombreMuellero?: string | null
  turnoInicio?: string | null
  turnoFin?: string | null
  observaciones?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  operaciones?: Prisma.OperacionCreateNestedManyWithoutBitacoraInput
}

export type BitacoraUncheckedCreateWithoutBarcoInput = {
  id?: number
  fechaInicio?: string | null
  fecha?: string | null
  fechaCierre?: string | null
  nombreMuellero?: string | null
  turnoInicio?: string | null
  turnoFin?: string | null
  observaciones?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  operaciones?: Prisma.OperacionUncheckedCreateNestedManyWithoutBitacoraInput
}

export type BitacoraCreateOrConnectWithoutBarcoInput = {
  where: Prisma.BitacoraWhereUniqueInput
  create: Prisma.XOR<Prisma.BitacoraCreateWithoutBarcoInput, Prisma.BitacoraUncheckedCreateWithoutBarcoInput>
}

export type BitacoraCreateManyBarcoInputEnvelope = {
  data: Prisma.BitacoraCreateManyBarcoInput | Prisma.BitacoraCreateManyBarcoInput[]
  skipDuplicates?: boolean
}

export type BitacoraUpsertWithWhereUniqueWithoutBarcoInput = {
  where: Prisma.BitacoraWhereUniqueInput
  update: Prisma.XOR<Prisma.BitacoraUpdateWithoutBarcoInput, Prisma.BitacoraUncheckedUpdateWithoutBarcoInput>
  create: Prisma.XOR<Prisma.BitacoraCreateWithoutBarcoInput, Prisma.BitacoraUncheckedCreateWithoutBarcoInput>
}

export type BitacoraUpdateWithWhereUniqueWithoutBarcoInput = {
  where: Prisma.BitacoraWhereUniqueInput
  data: Prisma.XOR<Prisma.BitacoraUpdateWithoutBarcoInput, Prisma.BitacoraUncheckedUpdateWithoutBarcoInput>
}

export type BitacoraUpdateManyWithWhereWithoutBarcoInput = {
  where: Prisma.BitacoraScalarWhereInput
  data: Prisma.XOR<Prisma.BitacoraUpdateManyMutationInput, Prisma.BitacoraUncheckedUpdateManyWithoutBarcoInput>
}

export type BitacoraScalarWhereInput = {
  AND?: Prisma.BitacoraScalarWhereInput | Prisma.BitacoraScalarWhereInput[]
  OR?: Prisma.BitacoraScalarWhereInput[]
  NOT?: Prisma.BitacoraScalarWhereInput | Prisma.BitacoraScalarWhereInput[]
  id?: Prisma.IntFilter<"Bitacora"> | number
  fechaInicio?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  fecha?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  fechaCierre?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  nombreMuellero?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  turnoInicio?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  turnoFin?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  observaciones?: Prisma.StringNullableFilter<"Bitacora"> | string | null
  barcoId?: Prisma.IntNullableFilter<"Bitacora"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Bitacora"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Bitacora"> | Date | string
}

export type BitacoraCreateWithoutOperacionesInput = {
  fechaInicio?: string | null
  fecha?: string | null
  fechaCierre?: string | null
  nombreMuellero?: string | null
  turnoInicio?: string | null
  turnoFin?: string | null
  observaciones?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  barco?: Prisma.BarcoCreateNestedOneWithoutBitacorasInput
}

export type BitacoraUncheckedCreateWithoutOperacionesInput = {
  id?: number
  fechaInicio?: string | null
  fecha?: string | null
  fechaCierre?: string | null
  nombreMuellero?: string | null
  turnoInicio?: string | null
  turnoFin?: string | null
  observaciones?: string | null
  barcoId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BitacoraCreateOrConnectWithoutOperacionesInput = {
  where: Prisma.BitacoraWhereUniqueInput
  create: Prisma.XOR<Prisma.BitacoraCreateWithoutOperacionesInput, Prisma.BitacoraUncheckedCreateWithoutOperacionesInput>
}

export type BitacoraUpsertWithoutOperacionesInput = {
  update: Prisma.XOR<Prisma.BitacoraUpdateWithoutOperacionesInput, Prisma.BitacoraUncheckedUpdateWithoutOperacionesInput>
  create: Prisma.XOR<Prisma.BitacoraCreateWithoutOperacionesInput, Prisma.BitacoraUncheckedCreateWithoutOperacionesInput>
  where?: Prisma.BitacoraWhereInput
}

export type BitacoraUpdateToOneWithWhereWithoutOperacionesInput = {
  where?: Prisma.BitacoraWhereInput
  data: Prisma.XOR<Prisma.BitacoraUpdateWithoutOperacionesInput, Prisma.BitacoraUncheckedUpdateWithoutOperacionesInput>
}

export type BitacoraUpdateWithoutOperacionesInput = {
  fechaInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fecha?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fechaCierre?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nombreMuellero?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoFin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  observaciones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  barco?: Prisma.BarcoUpdateOneWithoutBitacorasNestedInput
}

export type BitacoraUncheckedUpdateWithoutOperacionesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  fechaInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fecha?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fechaCierre?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nombreMuellero?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoFin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  observaciones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  barcoId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BitacoraCreateManyBarcoInput = {
  id?: number
  fechaInicio?: string | null
  fecha?: string | null
  fechaCierre?: string | null
  nombreMuellero?: string | null
  turnoInicio?: string | null
  turnoFin?: string | null
  observaciones?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BitacoraUpdateWithoutBarcoInput = {
  fechaInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fecha?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fechaCierre?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nombreMuellero?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoFin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  observaciones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  operaciones?: Prisma.OperacionUpdateManyWithoutBitacoraNestedInput
}

export type BitacoraUncheckedUpdateWithoutBarcoInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  fechaInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fecha?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fechaCierre?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nombreMuellero?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoFin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  observaciones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  operaciones?: Prisma.OperacionUncheckedUpdateManyWithoutBitacoraNestedInput
}

export type BitacoraUncheckedUpdateManyWithoutBarcoInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  fechaInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fecha?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fechaCierre?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nombreMuellero?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoInicio?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  turnoFin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  observaciones?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type BitacoraCountOutputType
 */

export type BitacoraCountOutputType = {
  operaciones: number
}

export type BitacoraCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operaciones?: boolean | BitacoraCountOutputTypeCountOperacionesArgs
}

/**
 * BitacoraCountOutputType without action
 */
export type BitacoraCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BitacoraCountOutputType
   */
  select?: Prisma.BitacoraCountOutputTypeSelect<ExtArgs> | null
}

/**
 * BitacoraCountOutputType without action
 */
export type BitacoraCountOutputTypeCountOperacionesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OperacionWhereInput
}


export type BitacoraSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fechaInicio?: boolean
  fecha?: boolean
  fechaCierre?: boolean
  nombreMuellero?: boolean
  turnoInicio?: boolean
  turnoFin?: boolean
  observaciones?: boolean
  barcoId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  barco?: boolean | Prisma.Bitacora$barcoArgs<ExtArgs>
  operaciones?: boolean | Prisma.Bitacora$operacionesArgs<ExtArgs>
  _count?: boolean | Prisma.BitacoraCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bitacora"]>



export type BitacoraSelectScalar = {
  id?: boolean
  fechaInicio?: boolean
  fecha?: boolean
  fechaCierre?: boolean
  nombreMuellero?: boolean
  turnoInicio?: boolean
  turnoFin?: boolean
  observaciones?: boolean
  barcoId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type BitacoraOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "fechaInicio" | "fecha" | "fechaCierre" | "nombreMuellero" | "turnoInicio" | "turnoFin" | "observaciones" | "barcoId" | "createdAt" | "updatedAt", ExtArgs["result"]["bitacora"]>
export type BitacoraInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  barco?: boolean | Prisma.Bitacora$barcoArgs<ExtArgs>
  operaciones?: boolean | Prisma.Bitacora$operacionesArgs<ExtArgs>
  _count?: boolean | Prisma.BitacoraCountOutputTypeDefaultArgs<ExtArgs>
}

export type $BitacoraPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Bitacora"
  objects: {
    barco: Prisma.$BarcoPayload<ExtArgs> | null
    operaciones: Prisma.$OperacionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    fechaInicio: string | null
    fecha: string | null
    fechaCierre: string | null
    nombreMuellero: string | null
    turnoInicio: string | null
    turnoFin: string | null
    observaciones: string | null
    barcoId: number | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["bitacora"]>
  composites: {}
}

export type BitacoraGetPayload<S extends boolean | null | undefined | BitacoraDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BitacoraPayload, S>

export type BitacoraCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BitacoraFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BitacoraCountAggregateInputType | true
  }

export interface BitacoraDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bitacora'], meta: { name: 'Bitacora' } }
  /**
   * Find zero or one Bitacora that matches the filter.
   * @param {BitacoraFindUniqueArgs} args - Arguments to find a Bitacora
   * @example
   * // Get one Bitacora
   * const bitacora = await prisma.bitacora.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BitacoraFindUniqueArgs>(args: Prisma.SelectSubset<T, BitacoraFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BitacoraClient<runtime.Types.Result.GetResult<Prisma.$BitacoraPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Bitacora that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BitacoraFindUniqueOrThrowArgs} args - Arguments to find a Bitacora
   * @example
   * // Get one Bitacora
   * const bitacora = await prisma.bitacora.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BitacoraFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BitacoraFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BitacoraClient<runtime.Types.Result.GetResult<Prisma.$BitacoraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Bitacora that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BitacoraFindFirstArgs} args - Arguments to find a Bitacora
   * @example
   * // Get one Bitacora
   * const bitacora = await prisma.bitacora.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BitacoraFindFirstArgs>(args?: Prisma.SelectSubset<T, BitacoraFindFirstArgs<ExtArgs>>): Prisma.Prisma__BitacoraClient<runtime.Types.Result.GetResult<Prisma.$BitacoraPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Bitacora that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BitacoraFindFirstOrThrowArgs} args - Arguments to find a Bitacora
   * @example
   * // Get one Bitacora
   * const bitacora = await prisma.bitacora.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BitacoraFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BitacoraFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BitacoraClient<runtime.Types.Result.GetResult<Prisma.$BitacoraPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Bitacoras that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BitacoraFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Bitacoras
   * const bitacoras = await prisma.bitacora.findMany()
   * 
   * // Get first 10 Bitacoras
   * const bitacoras = await prisma.bitacora.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const bitacoraWithIdOnly = await prisma.bitacora.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BitacoraFindManyArgs>(args?: Prisma.SelectSubset<T, BitacoraFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BitacoraPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Bitacora.
   * @param {BitacoraCreateArgs} args - Arguments to create a Bitacora.
   * @example
   * // Create one Bitacora
   * const Bitacora = await prisma.bitacora.create({
   *   data: {
   *     // ... data to create a Bitacora
   *   }
   * })
   * 
   */
  create<T extends BitacoraCreateArgs>(args: Prisma.SelectSubset<T, BitacoraCreateArgs<ExtArgs>>): Prisma.Prisma__BitacoraClient<runtime.Types.Result.GetResult<Prisma.$BitacoraPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Bitacoras.
   * @param {BitacoraCreateManyArgs} args - Arguments to create many Bitacoras.
   * @example
   * // Create many Bitacoras
   * const bitacora = await prisma.bitacora.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BitacoraCreateManyArgs>(args?: Prisma.SelectSubset<T, BitacoraCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Bitacora.
   * @param {BitacoraDeleteArgs} args - Arguments to delete one Bitacora.
   * @example
   * // Delete one Bitacora
   * const Bitacora = await prisma.bitacora.delete({
   *   where: {
   *     // ... filter to delete one Bitacora
   *   }
   * })
   * 
   */
  delete<T extends BitacoraDeleteArgs>(args: Prisma.SelectSubset<T, BitacoraDeleteArgs<ExtArgs>>): Prisma.Prisma__BitacoraClient<runtime.Types.Result.GetResult<Prisma.$BitacoraPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Bitacora.
   * @param {BitacoraUpdateArgs} args - Arguments to update one Bitacora.
   * @example
   * // Update one Bitacora
   * const bitacora = await prisma.bitacora.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BitacoraUpdateArgs>(args: Prisma.SelectSubset<T, BitacoraUpdateArgs<ExtArgs>>): Prisma.Prisma__BitacoraClient<runtime.Types.Result.GetResult<Prisma.$BitacoraPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Bitacoras.
   * @param {BitacoraDeleteManyArgs} args - Arguments to filter Bitacoras to delete.
   * @example
   * // Delete a few Bitacoras
   * const { count } = await prisma.bitacora.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BitacoraDeleteManyArgs>(args?: Prisma.SelectSubset<T, BitacoraDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Bitacoras.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BitacoraUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Bitacoras
   * const bitacora = await prisma.bitacora.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BitacoraUpdateManyArgs>(args: Prisma.SelectSubset<T, BitacoraUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Bitacora.
   * @param {BitacoraUpsertArgs} args - Arguments to update or create a Bitacora.
   * @example
   * // Update or create a Bitacora
   * const bitacora = await prisma.bitacora.upsert({
   *   create: {
   *     // ... data to create a Bitacora
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Bitacora we want to update
   *   }
   * })
   */
  upsert<T extends BitacoraUpsertArgs>(args: Prisma.SelectSubset<T, BitacoraUpsertArgs<ExtArgs>>): Prisma.Prisma__BitacoraClient<runtime.Types.Result.GetResult<Prisma.$BitacoraPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Bitacoras.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BitacoraCountArgs} args - Arguments to filter Bitacoras to count.
   * @example
   * // Count the number of Bitacoras
   * const count = await prisma.bitacora.count({
   *   where: {
   *     // ... the filter for the Bitacoras we want to count
   *   }
   * })
  **/
  count<T extends BitacoraCountArgs>(
    args?: Prisma.Subset<T, BitacoraCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BitacoraCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Bitacora.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BitacoraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BitacoraAggregateArgs>(args: Prisma.Subset<T, BitacoraAggregateArgs>): Prisma.PrismaPromise<GetBitacoraAggregateType<T>>

  /**
   * Group by Bitacora.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BitacoraGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BitacoraGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BitacoraGroupByArgs['orderBy'] }
      : { orderBy?: BitacoraGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BitacoraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBitacoraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Bitacora model
 */
readonly fields: BitacoraFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Bitacora.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BitacoraClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  barco<T extends Prisma.Bitacora$barcoArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Bitacora$barcoArgs<ExtArgs>>): Prisma.Prisma__BarcoClient<runtime.Types.Result.GetResult<Prisma.$BarcoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  operaciones<T extends Prisma.Bitacora$operacionesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Bitacora$operacionesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OperacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Bitacora model
 */
export interface BitacoraFieldRefs {
  readonly id: Prisma.FieldRef<"Bitacora", 'Int'>
  readonly fechaInicio: Prisma.FieldRef<"Bitacora", 'String'>
  readonly fecha: Prisma.FieldRef<"Bitacora", 'String'>
  readonly fechaCierre: Prisma.FieldRef<"Bitacora", 'String'>
  readonly nombreMuellero: Prisma.FieldRef<"Bitacora", 'String'>
  readonly turnoInicio: Prisma.FieldRef<"Bitacora", 'String'>
  readonly turnoFin: Prisma.FieldRef<"Bitacora", 'String'>
  readonly observaciones: Prisma.FieldRef<"Bitacora", 'String'>
  readonly barcoId: Prisma.FieldRef<"Bitacora", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Bitacora", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Bitacora", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Bitacora findUnique
 */
export type BitacoraFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bitacora
   */
  select?: Prisma.BitacoraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bitacora
   */
  omit?: Prisma.BitacoraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BitacoraInclude<ExtArgs> | null
  /**
   * Filter, which Bitacora to fetch.
   */
  where: Prisma.BitacoraWhereUniqueInput
}

/**
 * Bitacora findUniqueOrThrow
 */
export type BitacoraFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bitacora
   */
  select?: Prisma.BitacoraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bitacora
   */
  omit?: Prisma.BitacoraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BitacoraInclude<ExtArgs> | null
  /**
   * Filter, which Bitacora to fetch.
   */
  where: Prisma.BitacoraWhereUniqueInput
}

/**
 * Bitacora findFirst
 */
export type BitacoraFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bitacora
   */
  select?: Prisma.BitacoraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bitacora
   */
  omit?: Prisma.BitacoraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BitacoraInclude<ExtArgs> | null
  /**
   * Filter, which Bitacora to fetch.
   */
  where?: Prisma.BitacoraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bitacoras to fetch.
   */
  orderBy?: Prisma.BitacoraOrderByWithRelationInput | Prisma.BitacoraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Bitacoras.
   */
  cursor?: Prisma.BitacoraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bitacoras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bitacoras.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Bitacoras.
   */
  distinct?: Prisma.BitacoraScalarFieldEnum | Prisma.BitacoraScalarFieldEnum[]
}

/**
 * Bitacora findFirstOrThrow
 */
export type BitacoraFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bitacora
   */
  select?: Prisma.BitacoraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bitacora
   */
  omit?: Prisma.BitacoraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BitacoraInclude<ExtArgs> | null
  /**
   * Filter, which Bitacora to fetch.
   */
  where?: Prisma.BitacoraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bitacoras to fetch.
   */
  orderBy?: Prisma.BitacoraOrderByWithRelationInput | Prisma.BitacoraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Bitacoras.
   */
  cursor?: Prisma.BitacoraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bitacoras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bitacoras.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Bitacoras.
   */
  distinct?: Prisma.BitacoraScalarFieldEnum | Prisma.BitacoraScalarFieldEnum[]
}

/**
 * Bitacora findMany
 */
export type BitacoraFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bitacora
   */
  select?: Prisma.BitacoraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bitacora
   */
  omit?: Prisma.BitacoraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BitacoraInclude<ExtArgs> | null
  /**
   * Filter, which Bitacoras to fetch.
   */
  where?: Prisma.BitacoraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bitacoras to fetch.
   */
  orderBy?: Prisma.BitacoraOrderByWithRelationInput | Prisma.BitacoraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Bitacoras.
   */
  cursor?: Prisma.BitacoraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bitacoras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bitacoras.
   */
  skip?: number
  distinct?: Prisma.BitacoraScalarFieldEnum | Prisma.BitacoraScalarFieldEnum[]
}

/**
 * Bitacora create
 */
export type BitacoraCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bitacora
   */
  select?: Prisma.BitacoraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bitacora
   */
  omit?: Prisma.BitacoraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BitacoraInclude<ExtArgs> | null
  /**
   * The data needed to create a Bitacora.
   */
  data: Prisma.XOR<Prisma.BitacoraCreateInput, Prisma.BitacoraUncheckedCreateInput>
}

/**
 * Bitacora createMany
 */
export type BitacoraCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Bitacoras.
   */
  data: Prisma.BitacoraCreateManyInput | Prisma.BitacoraCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Bitacora update
 */
export type BitacoraUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bitacora
   */
  select?: Prisma.BitacoraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bitacora
   */
  omit?: Prisma.BitacoraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BitacoraInclude<ExtArgs> | null
  /**
   * The data needed to update a Bitacora.
   */
  data: Prisma.XOR<Prisma.BitacoraUpdateInput, Prisma.BitacoraUncheckedUpdateInput>
  /**
   * Choose, which Bitacora to update.
   */
  where: Prisma.BitacoraWhereUniqueInput
}

/**
 * Bitacora updateMany
 */
export type BitacoraUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Bitacoras.
   */
  data: Prisma.XOR<Prisma.BitacoraUpdateManyMutationInput, Prisma.BitacoraUncheckedUpdateManyInput>
  /**
   * Filter which Bitacoras to update
   */
  where?: Prisma.BitacoraWhereInput
  /**
   * Limit how many Bitacoras to update.
   */
  limit?: number
}

/**
 * Bitacora upsert
 */
export type BitacoraUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bitacora
   */
  select?: Prisma.BitacoraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bitacora
   */
  omit?: Prisma.BitacoraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BitacoraInclude<ExtArgs> | null
  /**
   * The filter to search for the Bitacora to update in case it exists.
   */
  where: Prisma.BitacoraWhereUniqueInput
  /**
   * In case the Bitacora found by the `where` argument doesn't exist, create a new Bitacora with this data.
   */
  create: Prisma.XOR<Prisma.BitacoraCreateInput, Prisma.BitacoraUncheckedCreateInput>
  /**
   * In case the Bitacora was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BitacoraUpdateInput, Prisma.BitacoraUncheckedUpdateInput>
}

/**
 * Bitacora delete
 */
export type BitacoraDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bitacora
   */
  select?: Prisma.BitacoraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bitacora
   */
  omit?: Prisma.BitacoraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BitacoraInclude<ExtArgs> | null
  /**
   * Filter which Bitacora to delete.
   */
  where: Prisma.BitacoraWhereUniqueInput
}

/**
 * Bitacora deleteMany
 */
export type BitacoraDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Bitacoras to delete
   */
  where?: Prisma.BitacoraWhereInput
  /**
   * Limit how many Bitacoras to delete.
   */
  limit?: number
}

/**
 * Bitacora.barco
 */
export type Bitacora$barcoArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Barco
   */
  select?: Prisma.BarcoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Barco
   */
  omit?: Prisma.BarcoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BarcoInclude<ExtArgs> | null
  where?: Prisma.BarcoWhereInput
}

/**
 * Bitacora.operaciones
 */
export type Bitacora$operacionesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Operacion
   */
  select?: Prisma.OperacionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Operacion
   */
  omit?: Prisma.OperacionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperacionInclude<ExtArgs> | null
  where?: Prisma.OperacionWhereInput
  orderBy?: Prisma.OperacionOrderByWithRelationInput | Prisma.OperacionOrderByWithRelationInput[]
  cursor?: Prisma.OperacionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OperacionScalarFieldEnum | Prisma.OperacionScalarFieldEnum[]
}

/**
 * Bitacora without action
 */
export type BitacoraDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Bitacora
   */
  select?: Prisma.BitacoraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Bitacora
   */
  omit?: Prisma.BitacoraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BitacoraInclude<ExtArgs> | null
}

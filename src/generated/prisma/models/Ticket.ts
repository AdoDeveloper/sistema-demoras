
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `Ticket` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Ticket
 * 
 */
export type TicketModel = runtime.Types.Result.DefaultSelection<Prisma.$TicketPayload>

export type AggregateTicket = {
  _count: TicketCountAggregateOutputType | null
  _avg: TicketAvgAggregateOutputType | null
  _sum: TicketSumAggregateOutputType | null
  _min: TicketMinAggregateOutputType | null
  _max: TicketMaxAggregateOutputType | null
}

export type TicketAvgAggregateOutputType = {
  id: number | null
  userId: number | null
  assignedTo: number | null
}

export type TicketSumAggregateOutputType = {
  id: number | null
  userId: number | null
  assignedTo: number | null
}

export type TicketMinAggregateOutputType = {
  id: number | null
  numero: string | null
  fecha: string | null
  hora: string | null
  userName: string | null
  userId: number | null
  asunto: string | null
  descripcion: string | null
  imagenUrl: string | null
  imagenPublicId: string | null
  estado: string | null
  assignedTo: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TicketMaxAggregateOutputType = {
  id: number | null
  numero: string | null
  fecha: string | null
  hora: string | null
  userName: string | null
  userId: number | null
  asunto: string | null
  descripcion: string | null
  imagenUrl: string | null
  imagenPublicId: string | null
  estado: string | null
  assignedTo: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TicketCountAggregateOutputType = {
  id: number
  numero: number
  fecha: number
  hora: number
  userName: number
  userId: number
  asunto: number
  descripcion: number
  imagenUrl: number
  imagenPublicId: number
  estado: number
  assignedTo: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TicketAvgAggregateInputType = {
  id?: true
  userId?: true
  assignedTo?: true
}

export type TicketSumAggregateInputType = {
  id?: true
  userId?: true
  assignedTo?: true
}

export type TicketMinAggregateInputType = {
  id?: true
  numero?: true
  fecha?: true
  hora?: true
  userName?: true
  userId?: true
  asunto?: true
  descripcion?: true
  imagenUrl?: true
  imagenPublicId?: true
  estado?: true
  assignedTo?: true
  createdAt?: true
  updatedAt?: true
}

export type TicketMaxAggregateInputType = {
  id?: true
  numero?: true
  fecha?: true
  hora?: true
  userName?: true
  userId?: true
  asunto?: true
  descripcion?: true
  imagenUrl?: true
  imagenPublicId?: true
  estado?: true
  assignedTo?: true
  createdAt?: true
  updatedAt?: true
}

export type TicketCountAggregateInputType = {
  id?: true
  numero?: true
  fecha?: true
  hora?: true
  userName?: true
  userId?: true
  asunto?: true
  descripcion?: true
  imagenUrl?: true
  imagenPublicId?: true
  estado?: true
  assignedTo?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TicketAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Ticket to aggregate.
   */
  where?: Prisma.TicketWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tickets to fetch.
   */
  orderBy?: Prisma.TicketOrderByWithRelationInput | Prisma.TicketOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TicketWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tickets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tickets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Tickets
  **/
  _count?: true | TicketCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TicketAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TicketSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TicketMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TicketMaxAggregateInputType
}

export type GetTicketAggregateType<T extends TicketAggregateArgs> = {
      [P in keyof T & keyof AggregateTicket]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTicket[P]>
    : Prisma.GetScalarType<T[P], AggregateTicket[P]>
}




export type TicketGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TicketWhereInput
  orderBy?: Prisma.TicketOrderByWithAggregationInput | Prisma.TicketOrderByWithAggregationInput[]
  by: Prisma.TicketScalarFieldEnum[] | Prisma.TicketScalarFieldEnum
  having?: Prisma.TicketScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TicketCountAggregateInputType | true
  _avg?: TicketAvgAggregateInputType
  _sum?: TicketSumAggregateInputType
  _min?: TicketMinAggregateInputType
  _max?: TicketMaxAggregateInputType
}

export type TicketGroupByOutputType = {
  id: number
  numero: string
  fecha: string
  hora: string
  userName: string | null
  userId: number
  asunto: string
  descripcion: string
  imagenUrl: string | null
  imagenPublicId: string | null
  estado: string
  assignedTo: number | null
  createdAt: Date
  updatedAt: Date
  _count: TicketCountAggregateOutputType | null
  _avg: TicketAvgAggregateOutputType | null
  _sum: TicketSumAggregateOutputType | null
  _min: TicketMinAggregateOutputType | null
  _max: TicketMaxAggregateOutputType | null
}

type GetTicketGroupByPayload<T extends TicketGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TicketGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TicketGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TicketGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TicketGroupByOutputType[P]>
      }
    >
  > 



export type TicketWhereInput = {
  AND?: Prisma.TicketWhereInput | Prisma.TicketWhereInput[]
  OR?: Prisma.TicketWhereInput[]
  NOT?: Prisma.TicketWhereInput | Prisma.TicketWhereInput[]
  id?: Prisma.IntFilter<"Ticket"> | number
  numero?: Prisma.StringFilter<"Ticket"> | string
  fecha?: Prisma.StringFilter<"Ticket"> | string
  hora?: Prisma.StringFilter<"Ticket"> | string
  userName?: Prisma.StringNullableFilter<"Ticket"> | string | null
  userId?: Prisma.IntFilter<"Ticket"> | number
  asunto?: Prisma.StringFilter<"Ticket"> | string
  descripcion?: Prisma.StringFilter<"Ticket"> | string
  imagenUrl?: Prisma.StringNullableFilter<"Ticket"> | string | null
  imagenPublicId?: Prisma.StringNullableFilter<"Ticket"> | string | null
  estado?: Prisma.StringFilter<"Ticket"> | string
  assignedTo?: Prisma.IntNullableFilter<"Ticket"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Ticket"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Ticket"> | Date | string
  mensajes?: Prisma.MensajeListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  admin?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}

export type TicketOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  numero?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  hora?: Prisma.SortOrder
  userName?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  asunto?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  imagenUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  imagenPublicId?: Prisma.SortOrderInput | Prisma.SortOrder
  estado?: Prisma.SortOrder
  assignedTo?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  mensajes?: Prisma.MensajeOrderByRelationAggregateInput
  user?: Prisma.UserOrderByWithRelationInput
  admin?: Prisma.UserOrderByWithRelationInput
  _relevance?: Prisma.TicketOrderByRelevanceInput
}

export type TicketWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.TicketWhereInput | Prisma.TicketWhereInput[]
  OR?: Prisma.TicketWhereInput[]
  NOT?: Prisma.TicketWhereInput | Prisma.TicketWhereInput[]
  numero?: Prisma.StringFilter<"Ticket"> | string
  fecha?: Prisma.StringFilter<"Ticket"> | string
  hora?: Prisma.StringFilter<"Ticket"> | string
  userName?: Prisma.StringNullableFilter<"Ticket"> | string | null
  userId?: Prisma.IntFilter<"Ticket"> | number
  asunto?: Prisma.StringFilter<"Ticket"> | string
  descripcion?: Prisma.StringFilter<"Ticket"> | string
  imagenUrl?: Prisma.StringNullableFilter<"Ticket"> | string | null
  imagenPublicId?: Prisma.StringNullableFilter<"Ticket"> | string | null
  estado?: Prisma.StringFilter<"Ticket"> | string
  assignedTo?: Prisma.IntNullableFilter<"Ticket"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Ticket"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Ticket"> | Date | string
  mensajes?: Prisma.MensajeListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  admin?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}, "id">

export type TicketOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  numero?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  hora?: Prisma.SortOrder
  userName?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  asunto?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  imagenUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  imagenPublicId?: Prisma.SortOrderInput | Prisma.SortOrder
  estado?: Prisma.SortOrder
  assignedTo?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TicketCountOrderByAggregateInput
  _avg?: Prisma.TicketAvgOrderByAggregateInput
  _max?: Prisma.TicketMaxOrderByAggregateInput
  _min?: Prisma.TicketMinOrderByAggregateInput
  _sum?: Prisma.TicketSumOrderByAggregateInput
}

export type TicketScalarWhereWithAggregatesInput = {
  AND?: Prisma.TicketScalarWhereWithAggregatesInput | Prisma.TicketScalarWhereWithAggregatesInput[]
  OR?: Prisma.TicketScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TicketScalarWhereWithAggregatesInput | Prisma.TicketScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Ticket"> | number
  numero?: Prisma.StringWithAggregatesFilter<"Ticket"> | string
  fecha?: Prisma.StringWithAggregatesFilter<"Ticket"> | string
  hora?: Prisma.StringWithAggregatesFilter<"Ticket"> | string
  userName?: Prisma.StringNullableWithAggregatesFilter<"Ticket"> | string | null
  userId?: Prisma.IntWithAggregatesFilter<"Ticket"> | number
  asunto?: Prisma.StringWithAggregatesFilter<"Ticket"> | string
  descripcion?: Prisma.StringWithAggregatesFilter<"Ticket"> | string
  imagenUrl?: Prisma.StringNullableWithAggregatesFilter<"Ticket"> | string | null
  imagenPublicId?: Prisma.StringNullableWithAggregatesFilter<"Ticket"> | string | null
  estado?: Prisma.StringWithAggregatesFilter<"Ticket"> | string
  assignedTo?: Prisma.IntNullableWithAggregatesFilter<"Ticket"> | number | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Ticket"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Ticket"> | Date | string
}

export type TicketCreateInput = {
  numero: string
  fecha: string
  hora: string
  userName?: string | null
  asunto: string
  descripcion: string
  imagenUrl?: string | null
  imagenPublicId?: string | null
  estado?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  mensajes?: Prisma.MensajeCreateNestedManyWithoutTicketInput
  user: Prisma.UserCreateNestedOneWithoutTicketsInput
  admin?: Prisma.UserCreateNestedOneWithoutAssignedTicketsInput
}

export type TicketUncheckedCreateInput = {
  id?: number
  numero: string
  fecha: string
  hora: string
  userName?: string | null
  userId: number
  asunto: string
  descripcion: string
  imagenUrl?: string | null
  imagenPublicId?: string | null
  estado?: string
  assignedTo?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  mensajes?: Prisma.MensajeUncheckedCreateNestedManyWithoutTicketInput
}

export type TicketUpdateInput = {
  numero?: Prisma.StringFieldUpdateOperationsInput | string
  fecha?: Prisma.StringFieldUpdateOperationsInput | string
  hora?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  asunto?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  imagenUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imagenPublicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  estado?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mensajes?: Prisma.MensajeUpdateManyWithoutTicketNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutTicketsNestedInput
  admin?: Prisma.UserUpdateOneWithoutAssignedTicketsNestedInput
}

export type TicketUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  numero?: Prisma.StringFieldUpdateOperationsInput | string
  fecha?: Prisma.StringFieldUpdateOperationsInput | string
  hora?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  asunto?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  imagenUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imagenPublicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  estado?: Prisma.StringFieldUpdateOperationsInput | string
  assignedTo?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mensajes?: Prisma.MensajeUncheckedUpdateManyWithoutTicketNestedInput
}

export type TicketCreateManyInput = {
  id?: number
  numero: string
  fecha: string
  hora: string
  userName?: string | null
  userId: number
  asunto: string
  descripcion: string
  imagenUrl?: string | null
  imagenPublicId?: string | null
  estado?: string
  assignedTo?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TicketUpdateManyMutationInput = {
  numero?: Prisma.StringFieldUpdateOperationsInput | string
  fecha?: Prisma.StringFieldUpdateOperationsInput | string
  hora?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  asunto?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  imagenUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imagenPublicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  estado?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TicketUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  numero?: Prisma.StringFieldUpdateOperationsInput | string
  fecha?: Prisma.StringFieldUpdateOperationsInput | string
  hora?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  asunto?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  imagenUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imagenPublicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  estado?: Prisma.StringFieldUpdateOperationsInput | string
  assignedTo?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TicketListRelationFilter = {
  every?: Prisma.TicketWhereInput
  some?: Prisma.TicketWhereInput
  none?: Prisma.TicketWhereInput
}

export type TicketOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TicketOrderByRelevanceInput = {
  fields: Prisma.TicketOrderByRelevanceFieldEnum | Prisma.TicketOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type TicketCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  numero?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  hora?: Prisma.SortOrder
  userName?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  asunto?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  imagenUrl?: Prisma.SortOrder
  imagenPublicId?: Prisma.SortOrder
  estado?: Prisma.SortOrder
  assignedTo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TicketAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  assignedTo?: Prisma.SortOrder
}

export type TicketMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  numero?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  hora?: Prisma.SortOrder
  userName?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  asunto?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  imagenUrl?: Prisma.SortOrder
  imagenPublicId?: Prisma.SortOrder
  estado?: Prisma.SortOrder
  assignedTo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TicketMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  numero?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  hora?: Prisma.SortOrder
  userName?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  asunto?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  imagenUrl?: Prisma.SortOrder
  imagenPublicId?: Prisma.SortOrder
  estado?: Prisma.SortOrder
  assignedTo?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TicketSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  assignedTo?: Prisma.SortOrder
}

export type TicketScalarRelationFilter = {
  is?: Prisma.TicketWhereInput
  isNot?: Prisma.TicketWhereInput
}

export type TicketCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TicketCreateWithoutUserInput, Prisma.TicketUncheckedCreateWithoutUserInput> | Prisma.TicketCreateWithoutUserInput[] | Prisma.TicketUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TicketCreateOrConnectWithoutUserInput | Prisma.TicketCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TicketCreateManyUserInputEnvelope
  connect?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
}

export type TicketCreateNestedManyWithoutAdminInput = {
  create?: Prisma.XOR<Prisma.TicketCreateWithoutAdminInput, Prisma.TicketUncheckedCreateWithoutAdminInput> | Prisma.TicketCreateWithoutAdminInput[] | Prisma.TicketUncheckedCreateWithoutAdminInput[]
  connectOrCreate?: Prisma.TicketCreateOrConnectWithoutAdminInput | Prisma.TicketCreateOrConnectWithoutAdminInput[]
  createMany?: Prisma.TicketCreateManyAdminInputEnvelope
  connect?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
}

export type TicketUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TicketCreateWithoutUserInput, Prisma.TicketUncheckedCreateWithoutUserInput> | Prisma.TicketCreateWithoutUserInput[] | Prisma.TicketUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TicketCreateOrConnectWithoutUserInput | Prisma.TicketCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TicketCreateManyUserInputEnvelope
  connect?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
}

export type TicketUncheckedCreateNestedManyWithoutAdminInput = {
  create?: Prisma.XOR<Prisma.TicketCreateWithoutAdminInput, Prisma.TicketUncheckedCreateWithoutAdminInput> | Prisma.TicketCreateWithoutAdminInput[] | Prisma.TicketUncheckedCreateWithoutAdminInput[]
  connectOrCreate?: Prisma.TicketCreateOrConnectWithoutAdminInput | Prisma.TicketCreateOrConnectWithoutAdminInput[]
  createMany?: Prisma.TicketCreateManyAdminInputEnvelope
  connect?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
}

export type TicketUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TicketCreateWithoutUserInput, Prisma.TicketUncheckedCreateWithoutUserInput> | Prisma.TicketCreateWithoutUserInput[] | Prisma.TicketUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TicketCreateOrConnectWithoutUserInput | Prisma.TicketCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TicketUpsertWithWhereUniqueWithoutUserInput | Prisma.TicketUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TicketCreateManyUserInputEnvelope
  set?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  disconnect?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  delete?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  connect?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  update?: Prisma.TicketUpdateWithWhereUniqueWithoutUserInput | Prisma.TicketUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TicketUpdateManyWithWhereWithoutUserInput | Prisma.TicketUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TicketScalarWhereInput | Prisma.TicketScalarWhereInput[]
}

export type TicketUpdateManyWithoutAdminNestedInput = {
  create?: Prisma.XOR<Prisma.TicketCreateWithoutAdminInput, Prisma.TicketUncheckedCreateWithoutAdminInput> | Prisma.TicketCreateWithoutAdminInput[] | Prisma.TicketUncheckedCreateWithoutAdminInput[]
  connectOrCreate?: Prisma.TicketCreateOrConnectWithoutAdminInput | Prisma.TicketCreateOrConnectWithoutAdminInput[]
  upsert?: Prisma.TicketUpsertWithWhereUniqueWithoutAdminInput | Prisma.TicketUpsertWithWhereUniqueWithoutAdminInput[]
  createMany?: Prisma.TicketCreateManyAdminInputEnvelope
  set?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  disconnect?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  delete?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  connect?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  update?: Prisma.TicketUpdateWithWhereUniqueWithoutAdminInput | Prisma.TicketUpdateWithWhereUniqueWithoutAdminInput[]
  updateMany?: Prisma.TicketUpdateManyWithWhereWithoutAdminInput | Prisma.TicketUpdateManyWithWhereWithoutAdminInput[]
  deleteMany?: Prisma.TicketScalarWhereInput | Prisma.TicketScalarWhereInput[]
}

export type TicketUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TicketCreateWithoutUserInput, Prisma.TicketUncheckedCreateWithoutUserInput> | Prisma.TicketCreateWithoutUserInput[] | Prisma.TicketUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TicketCreateOrConnectWithoutUserInput | Prisma.TicketCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TicketUpsertWithWhereUniqueWithoutUserInput | Prisma.TicketUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TicketCreateManyUserInputEnvelope
  set?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  disconnect?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  delete?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  connect?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  update?: Prisma.TicketUpdateWithWhereUniqueWithoutUserInput | Prisma.TicketUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TicketUpdateManyWithWhereWithoutUserInput | Prisma.TicketUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TicketScalarWhereInput | Prisma.TicketScalarWhereInput[]
}

export type TicketUncheckedUpdateManyWithoutAdminNestedInput = {
  create?: Prisma.XOR<Prisma.TicketCreateWithoutAdminInput, Prisma.TicketUncheckedCreateWithoutAdminInput> | Prisma.TicketCreateWithoutAdminInput[] | Prisma.TicketUncheckedCreateWithoutAdminInput[]
  connectOrCreate?: Prisma.TicketCreateOrConnectWithoutAdminInput | Prisma.TicketCreateOrConnectWithoutAdminInput[]
  upsert?: Prisma.TicketUpsertWithWhereUniqueWithoutAdminInput | Prisma.TicketUpsertWithWhereUniqueWithoutAdminInput[]
  createMany?: Prisma.TicketCreateManyAdminInputEnvelope
  set?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  disconnect?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  delete?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  connect?: Prisma.TicketWhereUniqueInput | Prisma.TicketWhereUniqueInput[]
  update?: Prisma.TicketUpdateWithWhereUniqueWithoutAdminInput | Prisma.TicketUpdateWithWhereUniqueWithoutAdminInput[]
  updateMany?: Prisma.TicketUpdateManyWithWhereWithoutAdminInput | Prisma.TicketUpdateManyWithWhereWithoutAdminInput[]
  deleteMany?: Prisma.TicketScalarWhereInput | Prisma.TicketScalarWhereInput[]
}

export type TicketCreateNestedOneWithoutMensajesInput = {
  create?: Prisma.XOR<Prisma.TicketCreateWithoutMensajesInput, Prisma.TicketUncheckedCreateWithoutMensajesInput>
  connectOrCreate?: Prisma.TicketCreateOrConnectWithoutMensajesInput
  connect?: Prisma.TicketWhereUniqueInput
}

export type TicketUpdateOneRequiredWithoutMensajesNestedInput = {
  create?: Prisma.XOR<Prisma.TicketCreateWithoutMensajesInput, Prisma.TicketUncheckedCreateWithoutMensajesInput>
  connectOrCreate?: Prisma.TicketCreateOrConnectWithoutMensajesInput
  upsert?: Prisma.TicketUpsertWithoutMensajesInput
  connect?: Prisma.TicketWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TicketUpdateToOneWithWhereWithoutMensajesInput, Prisma.TicketUpdateWithoutMensajesInput>, Prisma.TicketUncheckedUpdateWithoutMensajesInput>
}

export type TicketCreateWithoutUserInput = {
  numero: string
  fecha: string
  hora: string
  userName?: string | null
  asunto: string
  descripcion: string
  imagenUrl?: string | null
  imagenPublicId?: string | null
  estado?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  mensajes?: Prisma.MensajeCreateNestedManyWithoutTicketInput
  admin?: Prisma.UserCreateNestedOneWithoutAssignedTicketsInput
}

export type TicketUncheckedCreateWithoutUserInput = {
  id?: number
  numero: string
  fecha: string
  hora: string
  userName?: string | null
  asunto: string
  descripcion: string
  imagenUrl?: string | null
  imagenPublicId?: string | null
  estado?: string
  assignedTo?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  mensajes?: Prisma.MensajeUncheckedCreateNestedManyWithoutTicketInput
}

export type TicketCreateOrConnectWithoutUserInput = {
  where: Prisma.TicketWhereUniqueInput
  create: Prisma.XOR<Prisma.TicketCreateWithoutUserInput, Prisma.TicketUncheckedCreateWithoutUserInput>
}

export type TicketCreateManyUserInputEnvelope = {
  data: Prisma.TicketCreateManyUserInput | Prisma.TicketCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type TicketCreateWithoutAdminInput = {
  numero: string
  fecha: string
  hora: string
  userName?: string | null
  asunto: string
  descripcion: string
  imagenUrl?: string | null
  imagenPublicId?: string | null
  estado?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  mensajes?: Prisma.MensajeCreateNestedManyWithoutTicketInput
  user: Prisma.UserCreateNestedOneWithoutTicketsInput
}

export type TicketUncheckedCreateWithoutAdminInput = {
  id?: number
  numero: string
  fecha: string
  hora: string
  userName?: string | null
  userId: number
  asunto: string
  descripcion: string
  imagenUrl?: string | null
  imagenPublicId?: string | null
  estado?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  mensajes?: Prisma.MensajeUncheckedCreateNestedManyWithoutTicketInput
}

export type TicketCreateOrConnectWithoutAdminInput = {
  where: Prisma.TicketWhereUniqueInput
  create: Prisma.XOR<Prisma.TicketCreateWithoutAdminInput, Prisma.TicketUncheckedCreateWithoutAdminInput>
}

export type TicketCreateManyAdminInputEnvelope = {
  data: Prisma.TicketCreateManyAdminInput | Prisma.TicketCreateManyAdminInput[]
  skipDuplicates?: boolean
}

export type TicketUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.TicketWhereUniqueInput
  update: Prisma.XOR<Prisma.TicketUpdateWithoutUserInput, Prisma.TicketUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.TicketCreateWithoutUserInput, Prisma.TicketUncheckedCreateWithoutUserInput>
}

export type TicketUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.TicketWhereUniqueInput
  data: Prisma.XOR<Prisma.TicketUpdateWithoutUserInput, Prisma.TicketUncheckedUpdateWithoutUserInput>
}

export type TicketUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.TicketScalarWhereInput
  data: Prisma.XOR<Prisma.TicketUpdateManyMutationInput, Prisma.TicketUncheckedUpdateManyWithoutUserInput>
}

export type TicketScalarWhereInput = {
  AND?: Prisma.TicketScalarWhereInput | Prisma.TicketScalarWhereInput[]
  OR?: Prisma.TicketScalarWhereInput[]
  NOT?: Prisma.TicketScalarWhereInput | Prisma.TicketScalarWhereInput[]
  id?: Prisma.IntFilter<"Ticket"> | number
  numero?: Prisma.StringFilter<"Ticket"> | string
  fecha?: Prisma.StringFilter<"Ticket"> | string
  hora?: Prisma.StringFilter<"Ticket"> | string
  userName?: Prisma.StringNullableFilter<"Ticket"> | string | null
  userId?: Prisma.IntFilter<"Ticket"> | number
  asunto?: Prisma.StringFilter<"Ticket"> | string
  descripcion?: Prisma.StringFilter<"Ticket"> | string
  imagenUrl?: Prisma.StringNullableFilter<"Ticket"> | string | null
  imagenPublicId?: Prisma.StringNullableFilter<"Ticket"> | string | null
  estado?: Prisma.StringFilter<"Ticket"> | string
  assignedTo?: Prisma.IntNullableFilter<"Ticket"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Ticket"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Ticket"> | Date | string
}

export type TicketUpsertWithWhereUniqueWithoutAdminInput = {
  where: Prisma.TicketWhereUniqueInput
  update: Prisma.XOR<Prisma.TicketUpdateWithoutAdminInput, Prisma.TicketUncheckedUpdateWithoutAdminInput>
  create: Prisma.XOR<Prisma.TicketCreateWithoutAdminInput, Prisma.TicketUncheckedCreateWithoutAdminInput>
}

export type TicketUpdateWithWhereUniqueWithoutAdminInput = {
  where: Prisma.TicketWhereUniqueInput
  data: Prisma.XOR<Prisma.TicketUpdateWithoutAdminInput, Prisma.TicketUncheckedUpdateWithoutAdminInput>
}

export type TicketUpdateManyWithWhereWithoutAdminInput = {
  where: Prisma.TicketScalarWhereInput
  data: Prisma.XOR<Prisma.TicketUpdateManyMutationInput, Prisma.TicketUncheckedUpdateManyWithoutAdminInput>
}

export type TicketCreateWithoutMensajesInput = {
  numero: string
  fecha: string
  hora: string
  userName?: string | null
  asunto: string
  descripcion: string
  imagenUrl?: string | null
  imagenPublicId?: string | null
  estado?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutTicketsInput
  admin?: Prisma.UserCreateNestedOneWithoutAssignedTicketsInput
}

export type TicketUncheckedCreateWithoutMensajesInput = {
  id?: number
  numero: string
  fecha: string
  hora: string
  userName?: string | null
  userId: number
  asunto: string
  descripcion: string
  imagenUrl?: string | null
  imagenPublicId?: string | null
  estado?: string
  assignedTo?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TicketCreateOrConnectWithoutMensajesInput = {
  where: Prisma.TicketWhereUniqueInput
  create: Prisma.XOR<Prisma.TicketCreateWithoutMensajesInput, Prisma.TicketUncheckedCreateWithoutMensajesInput>
}

export type TicketUpsertWithoutMensajesInput = {
  update: Prisma.XOR<Prisma.TicketUpdateWithoutMensajesInput, Prisma.TicketUncheckedUpdateWithoutMensajesInput>
  create: Prisma.XOR<Prisma.TicketCreateWithoutMensajesInput, Prisma.TicketUncheckedCreateWithoutMensajesInput>
  where?: Prisma.TicketWhereInput
}

export type TicketUpdateToOneWithWhereWithoutMensajesInput = {
  where?: Prisma.TicketWhereInput
  data: Prisma.XOR<Prisma.TicketUpdateWithoutMensajesInput, Prisma.TicketUncheckedUpdateWithoutMensajesInput>
}

export type TicketUpdateWithoutMensajesInput = {
  numero?: Prisma.StringFieldUpdateOperationsInput | string
  fecha?: Prisma.StringFieldUpdateOperationsInput | string
  hora?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  asunto?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  imagenUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imagenPublicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  estado?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutTicketsNestedInput
  admin?: Prisma.UserUpdateOneWithoutAssignedTicketsNestedInput
}

export type TicketUncheckedUpdateWithoutMensajesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  numero?: Prisma.StringFieldUpdateOperationsInput | string
  fecha?: Prisma.StringFieldUpdateOperationsInput | string
  hora?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  asunto?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  imagenUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imagenPublicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  estado?: Prisma.StringFieldUpdateOperationsInput | string
  assignedTo?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TicketCreateManyUserInput = {
  id?: number
  numero: string
  fecha: string
  hora: string
  userName?: string | null
  asunto: string
  descripcion: string
  imagenUrl?: string | null
  imagenPublicId?: string | null
  estado?: string
  assignedTo?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TicketCreateManyAdminInput = {
  id?: number
  numero: string
  fecha: string
  hora: string
  userName?: string | null
  userId: number
  asunto: string
  descripcion: string
  imagenUrl?: string | null
  imagenPublicId?: string | null
  estado?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TicketUpdateWithoutUserInput = {
  numero?: Prisma.StringFieldUpdateOperationsInput | string
  fecha?: Prisma.StringFieldUpdateOperationsInput | string
  hora?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  asunto?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  imagenUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imagenPublicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  estado?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mensajes?: Prisma.MensajeUpdateManyWithoutTicketNestedInput
  admin?: Prisma.UserUpdateOneWithoutAssignedTicketsNestedInput
}

export type TicketUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  numero?: Prisma.StringFieldUpdateOperationsInput | string
  fecha?: Prisma.StringFieldUpdateOperationsInput | string
  hora?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  asunto?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  imagenUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imagenPublicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  estado?: Prisma.StringFieldUpdateOperationsInput | string
  assignedTo?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mensajes?: Prisma.MensajeUncheckedUpdateManyWithoutTicketNestedInput
}

export type TicketUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  numero?: Prisma.StringFieldUpdateOperationsInput | string
  fecha?: Prisma.StringFieldUpdateOperationsInput | string
  hora?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  asunto?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  imagenUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imagenPublicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  estado?: Prisma.StringFieldUpdateOperationsInput | string
  assignedTo?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TicketUpdateWithoutAdminInput = {
  numero?: Prisma.StringFieldUpdateOperationsInput | string
  fecha?: Prisma.StringFieldUpdateOperationsInput | string
  hora?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  asunto?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  imagenUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imagenPublicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  estado?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mensajes?: Prisma.MensajeUpdateManyWithoutTicketNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutTicketsNestedInput
}

export type TicketUncheckedUpdateWithoutAdminInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  numero?: Prisma.StringFieldUpdateOperationsInput | string
  fecha?: Prisma.StringFieldUpdateOperationsInput | string
  hora?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  asunto?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  imagenUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imagenPublicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  estado?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mensajes?: Prisma.MensajeUncheckedUpdateManyWithoutTicketNestedInput
}

export type TicketUncheckedUpdateManyWithoutAdminInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  numero?: Prisma.StringFieldUpdateOperationsInput | string
  fecha?: Prisma.StringFieldUpdateOperationsInput | string
  hora?: Prisma.StringFieldUpdateOperationsInput | string
  userName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  asunto?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  imagenUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imagenPublicId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  estado?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type TicketCountOutputType
 */

export type TicketCountOutputType = {
  mensajes: number
}

export type TicketCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mensajes?: boolean | TicketCountOutputTypeCountMensajesArgs
}

/**
 * TicketCountOutputType without action
 */
export type TicketCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TicketCountOutputType
   */
  select?: Prisma.TicketCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TicketCountOutputType without action
 */
export type TicketCountOutputTypeCountMensajesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MensajeWhereInput
}


export type TicketSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  numero?: boolean
  fecha?: boolean
  hora?: boolean
  userName?: boolean
  userId?: boolean
  asunto?: boolean
  descripcion?: boolean
  imagenUrl?: boolean
  imagenPublicId?: boolean
  estado?: boolean
  assignedTo?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mensajes?: boolean | Prisma.Ticket$mensajesArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  admin?: boolean | Prisma.Ticket$adminArgs<ExtArgs>
  _count?: boolean | Prisma.TicketCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["ticket"]>



export type TicketSelectScalar = {
  id?: boolean
  numero?: boolean
  fecha?: boolean
  hora?: boolean
  userName?: boolean
  userId?: boolean
  asunto?: boolean
  descripcion?: boolean
  imagenUrl?: boolean
  imagenPublicId?: boolean
  estado?: boolean
  assignedTo?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TicketOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "numero" | "fecha" | "hora" | "userName" | "userId" | "asunto" | "descripcion" | "imagenUrl" | "imagenPublicId" | "estado" | "assignedTo" | "createdAt" | "updatedAt", ExtArgs["result"]["ticket"]>
export type TicketInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mensajes?: boolean | Prisma.Ticket$mensajesArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  admin?: boolean | Prisma.Ticket$adminArgs<ExtArgs>
  _count?: boolean | Prisma.TicketCountOutputTypeDefaultArgs<ExtArgs>
}

export type $TicketPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Ticket"
  objects: {
    mensajes: Prisma.$MensajePayload<ExtArgs>[]
    user: Prisma.$UserPayload<ExtArgs>
    admin: Prisma.$UserPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    numero: string
    fecha: string
    hora: string
    userName: string | null
    userId: number
    asunto: string
    descripcion: string
    imagenUrl: string | null
    imagenPublicId: string | null
    estado: string
    assignedTo: number | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["ticket"]>
  composites: {}
}

export type TicketGetPayload<S extends boolean | null | undefined | TicketDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TicketPayload, S>

export type TicketCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TicketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TicketCountAggregateInputType | true
  }

export interface TicketDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ticket'], meta: { name: 'Ticket' } }
  /**
   * Find zero or one Ticket that matches the filter.
   * @param {TicketFindUniqueArgs} args - Arguments to find a Ticket
   * @example
   * // Get one Ticket
   * const ticket = await prisma.ticket.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TicketFindUniqueArgs>(args: Prisma.SelectSubset<T, TicketFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TicketClient<runtime.Types.Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Ticket that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TicketFindUniqueOrThrowArgs} args - Arguments to find a Ticket
   * @example
   * // Get one Ticket
   * const ticket = await prisma.ticket.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TicketFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TicketClient<runtime.Types.Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ticket that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TicketFindFirstArgs} args - Arguments to find a Ticket
   * @example
   * // Get one Ticket
   * const ticket = await prisma.ticket.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TicketFindFirstArgs>(args?: Prisma.SelectSubset<T, TicketFindFirstArgs<ExtArgs>>): Prisma.Prisma__TicketClient<runtime.Types.Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ticket that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TicketFindFirstOrThrowArgs} args - Arguments to find a Ticket
   * @example
   * // Get one Ticket
   * const ticket = await prisma.ticket.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TicketFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TicketFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TicketClient<runtime.Types.Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tickets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TicketFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tickets
   * const tickets = await prisma.ticket.findMany()
   * 
   * // Get first 10 Tickets
   * const tickets = await prisma.ticket.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const ticketWithIdOnly = await prisma.ticket.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TicketFindManyArgs>(args?: Prisma.SelectSubset<T, TicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Ticket.
   * @param {TicketCreateArgs} args - Arguments to create a Ticket.
   * @example
   * // Create one Ticket
   * const Ticket = await prisma.ticket.create({
   *   data: {
   *     // ... data to create a Ticket
   *   }
   * })
   * 
   */
  create<T extends TicketCreateArgs>(args: Prisma.SelectSubset<T, TicketCreateArgs<ExtArgs>>): Prisma.Prisma__TicketClient<runtime.Types.Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tickets.
   * @param {TicketCreateManyArgs} args - Arguments to create many Tickets.
   * @example
   * // Create many Tickets
   * const ticket = await prisma.ticket.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TicketCreateManyArgs>(args?: Prisma.SelectSubset<T, TicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Ticket.
   * @param {TicketDeleteArgs} args - Arguments to delete one Ticket.
   * @example
   * // Delete one Ticket
   * const Ticket = await prisma.ticket.delete({
   *   where: {
   *     // ... filter to delete one Ticket
   *   }
   * })
   * 
   */
  delete<T extends TicketDeleteArgs>(args: Prisma.SelectSubset<T, TicketDeleteArgs<ExtArgs>>): Prisma.Prisma__TicketClient<runtime.Types.Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Ticket.
   * @param {TicketUpdateArgs} args - Arguments to update one Ticket.
   * @example
   * // Update one Ticket
   * const ticket = await prisma.ticket.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TicketUpdateArgs>(args: Prisma.SelectSubset<T, TicketUpdateArgs<ExtArgs>>): Prisma.Prisma__TicketClient<runtime.Types.Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tickets.
   * @param {TicketDeleteManyArgs} args - Arguments to filter Tickets to delete.
   * @example
   * // Delete a few Tickets
   * const { count } = await prisma.ticket.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TicketDeleteManyArgs>(args?: Prisma.SelectSubset<T, TicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tickets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TicketUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tickets
   * const ticket = await prisma.ticket.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TicketUpdateManyArgs>(args: Prisma.SelectSubset<T, TicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Ticket.
   * @param {TicketUpsertArgs} args - Arguments to update or create a Ticket.
   * @example
   * // Update or create a Ticket
   * const ticket = await prisma.ticket.upsert({
   *   create: {
   *     // ... data to create a Ticket
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Ticket we want to update
   *   }
   * })
   */
  upsert<T extends TicketUpsertArgs>(args: Prisma.SelectSubset<T, TicketUpsertArgs<ExtArgs>>): Prisma.Prisma__TicketClient<runtime.Types.Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tickets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TicketCountArgs} args - Arguments to filter Tickets to count.
   * @example
   * // Count the number of Tickets
   * const count = await prisma.ticket.count({
   *   where: {
   *     // ... the filter for the Tickets we want to count
   *   }
   * })
  **/
  count<T extends TicketCountArgs>(
    args?: Prisma.Subset<T, TicketCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TicketCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Ticket.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TicketAggregateArgs>(args: Prisma.Subset<T, TicketAggregateArgs>): Prisma.PrismaPromise<GetTicketAggregateType<T>>

  /**
   * Group by Ticket.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TicketGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TicketGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TicketGroupByArgs['orderBy'] }
      : { orderBy?: TicketGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Ticket model
 */
readonly fields: TicketFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Ticket.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TicketClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  mensajes<T extends Prisma.Ticket$mensajesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Ticket$mensajesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MensajePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  admin<T extends Prisma.Ticket$adminArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Ticket$adminArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Ticket model
 */
export interface TicketFieldRefs {
  readonly id: Prisma.FieldRef<"Ticket", 'Int'>
  readonly numero: Prisma.FieldRef<"Ticket", 'String'>
  readonly fecha: Prisma.FieldRef<"Ticket", 'String'>
  readonly hora: Prisma.FieldRef<"Ticket", 'String'>
  readonly userName: Prisma.FieldRef<"Ticket", 'String'>
  readonly userId: Prisma.FieldRef<"Ticket", 'Int'>
  readonly asunto: Prisma.FieldRef<"Ticket", 'String'>
  readonly descripcion: Prisma.FieldRef<"Ticket", 'String'>
  readonly imagenUrl: Prisma.FieldRef<"Ticket", 'String'>
  readonly imagenPublicId: Prisma.FieldRef<"Ticket", 'String'>
  readonly estado: Prisma.FieldRef<"Ticket", 'String'>
  readonly assignedTo: Prisma.FieldRef<"Ticket", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Ticket", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Ticket", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Ticket findUnique
 */
export type TicketFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ticket
   */
  select?: Prisma.TicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ticket
   */
  omit?: Prisma.TicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TicketInclude<ExtArgs> | null
  /**
   * Filter, which Ticket to fetch.
   */
  where: Prisma.TicketWhereUniqueInput
}

/**
 * Ticket findUniqueOrThrow
 */
export type TicketFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ticket
   */
  select?: Prisma.TicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ticket
   */
  omit?: Prisma.TicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TicketInclude<ExtArgs> | null
  /**
   * Filter, which Ticket to fetch.
   */
  where: Prisma.TicketWhereUniqueInput
}

/**
 * Ticket findFirst
 */
export type TicketFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ticket
   */
  select?: Prisma.TicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ticket
   */
  omit?: Prisma.TicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TicketInclude<ExtArgs> | null
  /**
   * Filter, which Ticket to fetch.
   */
  where?: Prisma.TicketWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tickets to fetch.
   */
  orderBy?: Prisma.TicketOrderByWithRelationInput | Prisma.TicketOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Tickets.
   */
  cursor?: Prisma.TicketWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tickets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tickets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Tickets.
   */
  distinct?: Prisma.TicketScalarFieldEnum | Prisma.TicketScalarFieldEnum[]
}

/**
 * Ticket findFirstOrThrow
 */
export type TicketFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ticket
   */
  select?: Prisma.TicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ticket
   */
  omit?: Prisma.TicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TicketInclude<ExtArgs> | null
  /**
   * Filter, which Ticket to fetch.
   */
  where?: Prisma.TicketWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tickets to fetch.
   */
  orderBy?: Prisma.TicketOrderByWithRelationInput | Prisma.TicketOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Tickets.
   */
  cursor?: Prisma.TicketWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tickets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tickets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Tickets.
   */
  distinct?: Prisma.TicketScalarFieldEnum | Prisma.TicketScalarFieldEnum[]
}

/**
 * Ticket findMany
 */
export type TicketFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ticket
   */
  select?: Prisma.TicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ticket
   */
  omit?: Prisma.TicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TicketInclude<ExtArgs> | null
  /**
   * Filter, which Tickets to fetch.
   */
  where?: Prisma.TicketWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tickets to fetch.
   */
  orderBy?: Prisma.TicketOrderByWithRelationInput | Prisma.TicketOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Tickets.
   */
  cursor?: Prisma.TicketWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tickets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tickets.
   */
  skip?: number
  distinct?: Prisma.TicketScalarFieldEnum | Prisma.TicketScalarFieldEnum[]
}

/**
 * Ticket create
 */
export type TicketCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ticket
   */
  select?: Prisma.TicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ticket
   */
  omit?: Prisma.TicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TicketInclude<ExtArgs> | null
  /**
   * The data needed to create a Ticket.
   */
  data: Prisma.XOR<Prisma.TicketCreateInput, Prisma.TicketUncheckedCreateInput>
}

/**
 * Ticket createMany
 */
export type TicketCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Tickets.
   */
  data: Prisma.TicketCreateManyInput | Prisma.TicketCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Ticket update
 */
export type TicketUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ticket
   */
  select?: Prisma.TicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ticket
   */
  omit?: Prisma.TicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TicketInclude<ExtArgs> | null
  /**
   * The data needed to update a Ticket.
   */
  data: Prisma.XOR<Prisma.TicketUpdateInput, Prisma.TicketUncheckedUpdateInput>
  /**
   * Choose, which Ticket to update.
   */
  where: Prisma.TicketWhereUniqueInput
}

/**
 * Ticket updateMany
 */
export type TicketUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Tickets.
   */
  data: Prisma.XOR<Prisma.TicketUpdateManyMutationInput, Prisma.TicketUncheckedUpdateManyInput>
  /**
   * Filter which Tickets to update
   */
  where?: Prisma.TicketWhereInput
  /**
   * Limit how many Tickets to update.
   */
  limit?: number
}

/**
 * Ticket upsert
 */
export type TicketUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ticket
   */
  select?: Prisma.TicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ticket
   */
  omit?: Prisma.TicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TicketInclude<ExtArgs> | null
  /**
   * The filter to search for the Ticket to update in case it exists.
   */
  where: Prisma.TicketWhereUniqueInput
  /**
   * In case the Ticket found by the `where` argument doesn't exist, create a new Ticket with this data.
   */
  create: Prisma.XOR<Prisma.TicketCreateInput, Prisma.TicketUncheckedCreateInput>
  /**
   * In case the Ticket was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TicketUpdateInput, Prisma.TicketUncheckedUpdateInput>
}

/**
 * Ticket delete
 */
export type TicketDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ticket
   */
  select?: Prisma.TicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ticket
   */
  omit?: Prisma.TicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TicketInclude<ExtArgs> | null
  /**
   * Filter which Ticket to delete.
   */
  where: Prisma.TicketWhereUniqueInput
}

/**
 * Ticket deleteMany
 */
export type TicketDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Tickets to delete
   */
  where?: Prisma.TicketWhereInput
  /**
   * Limit how many Tickets to delete.
   */
  limit?: number
}

/**
 * Ticket.mensajes
 */
export type Ticket$mensajesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Mensaje
   */
  select?: Prisma.MensajeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Mensaje
   */
  omit?: Prisma.MensajeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MensajeInclude<ExtArgs> | null
  where?: Prisma.MensajeWhereInput
  orderBy?: Prisma.MensajeOrderByWithRelationInput | Prisma.MensajeOrderByWithRelationInput[]
  cursor?: Prisma.MensajeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MensajeScalarFieldEnum | Prisma.MensajeScalarFieldEnum[]
}

/**
 * Ticket.admin
 */
export type Ticket$adminArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * Ticket without action
 */
export type TicketDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ticket
   */
  select?: Prisma.TicketSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ticket
   */
  omit?: Prisma.TicketOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TicketInclude<ExtArgs> | null
}

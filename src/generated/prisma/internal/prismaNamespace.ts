
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models.js"
import { type PrismaClient } from "./class.js"

export type * from '../models.js'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
export const prismaVersion: PrismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  User: 'User',
  Role: 'Role',
  Session: 'Session',
  Demora: 'Demora',
  PrimerProceso: 'PrimerProceso',
  SegundoProceso: 'SegundoProceso',
  TercerProceso: 'TercerProceso',
  Vueltas: 'Vueltas',
  ProcesoFinal: 'ProcesoFinal',
  Envasado: 'Envasado',
  PrimerProcesoEnv: 'PrimerProcesoEnv',
  SegundoProcesoEnv: 'SegundoProcesoEnv',
  TercerProcesoEnv: 'TercerProcesoEnv',
  ProcesoFinalEnv: 'ProcesoFinalEnv',
  VueltasEnv: 'VueltasEnv',
  ParosEnv: 'ParosEnv',
  Molino: 'Molino',
  PrimerProcesoMol: 'PrimerProcesoMol',
  SegundoProcesoMol: 'SegundoProcesoMol',
  ParosMol: 'ParosMol',
  TercerProcesoMol: 'TercerProcesoMol',
  VueltasMol: 'VueltasMol',
  ProcesoFinalMol: 'ProcesoFinalMol',
  Actividad: 'Actividad',
  DetalleActividad: 'DetalleActividad',
  Barco: 'Barco',
  Bitacora: 'Bitacora',
  Operacion: 'Operacion',
  Equipo: 'Equipo',
  Ticket: 'Ticket',
  Mensaje: 'Mensaje',
  Producto: 'Producto',
  BarcoRecepcion: 'BarcoRecepcion',
  RecepcionTraslado: 'RecepcionTraslado',
  EmpresaTransporte: 'EmpresaTransporte'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "user" | "role" | "session" | "demora" | "primerProceso" | "segundoProceso" | "tercerProceso" | "vueltas" | "procesoFinal" | "envasado" | "primerProcesoEnv" | "segundoProcesoEnv" | "tercerProcesoEnv" | "procesoFinalEnv" | "vueltasEnv" | "parosEnv" | "molino" | "primerProcesoMol" | "segundoProcesoMol" | "parosMol" | "tercerProcesoMol" | "vueltasMol" | "procesoFinalMol" | "actividad" | "detalleActividad" | "barco" | "bitacora" | "operacion" | "equipo" | "ticket" | "mensaje" | "producto" | "barcoRecepcion" | "recepcionTraslado" | "empresaTransporte"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    Role: {
      payload: Prisma.$RolePayload<ExtArgs>
      fields: Prisma.RoleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RoleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        findFirst: {
          args: Prisma.RoleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        findMany: {
          args: Prisma.RoleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>[]
        }
        create: {
          args: Prisma.RoleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        createMany: {
          args: Prisma.RoleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.RoleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        update: {
          args: Prisma.RoleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        deleteMany: {
          args: Prisma.RoleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RoleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.RoleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        aggregate: {
          args: Prisma.RoleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRole>
        }
        groupBy: {
          args: Prisma.RoleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoleGroupByOutputType>[]
        }
        count: {
          args: Prisma.RoleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoleCountAggregateOutputType> | number
        }
      }
    }
    Session: {
      payload: Prisma.$SessionPayload<ExtArgs>
      fields: Prisma.SessionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SessionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        findFirst: {
          args: Prisma.SessionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        findMany: {
          args: Prisma.SessionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[]
        }
        create: {
          args: Prisma.SessionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        createMany: {
          args: Prisma.SessionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.SessionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        update: {
          args: Prisma.SessionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        deleteMany: {
          args: Prisma.SessionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SessionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.SessionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>
        }
        aggregate: {
          args: Prisma.SessionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSession>
        }
        groupBy: {
          args: Prisma.SessionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SessionGroupByOutputType>[]
        }
        count: {
          args: Prisma.SessionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SessionCountAggregateOutputType> | number
        }
      }
    }
    Demora: {
      payload: Prisma.$DemoraPayload<ExtArgs>
      fields: Prisma.DemoraFieldRefs
      operations: {
        findUnique: {
          args: Prisma.DemoraFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DemoraPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.DemoraFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DemoraPayload>
        }
        findFirst: {
          args: Prisma.DemoraFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DemoraPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.DemoraFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DemoraPayload>
        }
        findMany: {
          args: Prisma.DemoraFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DemoraPayload>[]
        }
        create: {
          args: Prisma.DemoraCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DemoraPayload>
        }
        createMany: {
          args: Prisma.DemoraCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.DemoraDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DemoraPayload>
        }
        update: {
          args: Prisma.DemoraUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DemoraPayload>
        }
        deleteMany: {
          args: Prisma.DemoraDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.DemoraUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.DemoraUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DemoraPayload>
        }
        aggregate: {
          args: Prisma.DemoraAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDemora>
        }
        groupBy: {
          args: Prisma.DemoraGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DemoraGroupByOutputType>[]
        }
        count: {
          args: Prisma.DemoraCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DemoraCountAggregateOutputType> | number
        }
      }
    }
    PrimerProceso: {
      payload: Prisma.$PrimerProcesoPayload<ExtArgs>
      fields: Prisma.PrimerProcesoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PrimerProcesoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PrimerProcesoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoPayload>
        }
        findFirst: {
          args: Prisma.PrimerProcesoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PrimerProcesoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoPayload>
        }
        findMany: {
          args: Prisma.PrimerProcesoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoPayload>[]
        }
        create: {
          args: Prisma.PrimerProcesoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoPayload>
        }
        createMany: {
          args: Prisma.PrimerProcesoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.PrimerProcesoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoPayload>
        }
        update: {
          args: Prisma.PrimerProcesoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoPayload>
        }
        deleteMany: {
          args: Prisma.PrimerProcesoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PrimerProcesoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.PrimerProcesoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoPayload>
        }
        aggregate: {
          args: Prisma.PrimerProcesoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePrimerProceso>
        }
        groupBy: {
          args: Prisma.PrimerProcesoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PrimerProcesoGroupByOutputType>[]
        }
        count: {
          args: Prisma.PrimerProcesoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PrimerProcesoCountAggregateOutputType> | number
        }
      }
    }
    SegundoProceso: {
      payload: Prisma.$SegundoProcesoPayload<ExtArgs>
      fields: Prisma.SegundoProcesoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SegundoProcesoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SegundoProcesoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoPayload>
        }
        findFirst: {
          args: Prisma.SegundoProcesoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SegundoProcesoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoPayload>
        }
        findMany: {
          args: Prisma.SegundoProcesoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoPayload>[]
        }
        create: {
          args: Prisma.SegundoProcesoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoPayload>
        }
        createMany: {
          args: Prisma.SegundoProcesoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.SegundoProcesoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoPayload>
        }
        update: {
          args: Prisma.SegundoProcesoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoPayload>
        }
        deleteMany: {
          args: Prisma.SegundoProcesoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SegundoProcesoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.SegundoProcesoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoPayload>
        }
        aggregate: {
          args: Prisma.SegundoProcesoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSegundoProceso>
        }
        groupBy: {
          args: Prisma.SegundoProcesoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SegundoProcesoGroupByOutputType>[]
        }
        count: {
          args: Prisma.SegundoProcesoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SegundoProcesoCountAggregateOutputType> | number
        }
      }
    }
    TercerProceso: {
      payload: Prisma.$TercerProcesoPayload<ExtArgs>
      fields: Prisma.TercerProcesoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TercerProcesoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TercerProcesoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoPayload>
        }
        findFirst: {
          args: Prisma.TercerProcesoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TercerProcesoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoPayload>
        }
        findMany: {
          args: Prisma.TercerProcesoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoPayload>[]
        }
        create: {
          args: Prisma.TercerProcesoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoPayload>
        }
        createMany: {
          args: Prisma.TercerProcesoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.TercerProcesoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoPayload>
        }
        update: {
          args: Prisma.TercerProcesoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoPayload>
        }
        deleteMany: {
          args: Prisma.TercerProcesoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TercerProcesoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.TercerProcesoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoPayload>
        }
        aggregate: {
          args: Prisma.TercerProcesoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTercerProceso>
        }
        groupBy: {
          args: Prisma.TercerProcesoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TercerProcesoGroupByOutputType>[]
        }
        count: {
          args: Prisma.TercerProcesoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TercerProcesoCountAggregateOutputType> | number
        }
      }
    }
    Vueltas: {
      payload: Prisma.$VueltasPayload<ExtArgs>
      fields: Prisma.VueltasFieldRefs
      operations: {
        findUnique: {
          args: Prisma.VueltasFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.VueltasFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasPayload>
        }
        findFirst: {
          args: Prisma.VueltasFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.VueltasFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasPayload>
        }
        findMany: {
          args: Prisma.VueltasFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasPayload>[]
        }
        create: {
          args: Prisma.VueltasCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasPayload>
        }
        createMany: {
          args: Prisma.VueltasCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.VueltasDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasPayload>
        }
        update: {
          args: Prisma.VueltasUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasPayload>
        }
        deleteMany: {
          args: Prisma.VueltasDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.VueltasUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.VueltasUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasPayload>
        }
        aggregate: {
          args: Prisma.VueltasAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateVueltas>
        }
        groupBy: {
          args: Prisma.VueltasGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VueltasGroupByOutputType>[]
        }
        count: {
          args: Prisma.VueltasCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VueltasCountAggregateOutputType> | number
        }
      }
    }
    ProcesoFinal: {
      payload: Prisma.$ProcesoFinalPayload<ExtArgs>
      fields: Prisma.ProcesoFinalFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProcesoFinalFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProcesoFinalFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalPayload>
        }
        findFirst: {
          args: Prisma.ProcesoFinalFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProcesoFinalFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalPayload>
        }
        findMany: {
          args: Prisma.ProcesoFinalFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalPayload>[]
        }
        create: {
          args: Prisma.ProcesoFinalCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalPayload>
        }
        createMany: {
          args: Prisma.ProcesoFinalCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.ProcesoFinalDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalPayload>
        }
        update: {
          args: Prisma.ProcesoFinalUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalPayload>
        }
        deleteMany: {
          args: Prisma.ProcesoFinalDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProcesoFinalUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.ProcesoFinalUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalPayload>
        }
        aggregate: {
          args: Prisma.ProcesoFinalAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProcesoFinal>
        }
        groupBy: {
          args: Prisma.ProcesoFinalGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcesoFinalGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProcesoFinalCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcesoFinalCountAggregateOutputType> | number
        }
      }
    }
    Envasado: {
      payload: Prisma.$EnvasadoPayload<ExtArgs>
      fields: Prisma.EnvasadoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EnvasadoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EnvasadoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EnvasadoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EnvasadoPayload>
        }
        findFirst: {
          args: Prisma.EnvasadoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EnvasadoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EnvasadoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EnvasadoPayload>
        }
        findMany: {
          args: Prisma.EnvasadoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EnvasadoPayload>[]
        }
        create: {
          args: Prisma.EnvasadoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EnvasadoPayload>
        }
        createMany: {
          args: Prisma.EnvasadoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.EnvasadoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EnvasadoPayload>
        }
        update: {
          args: Prisma.EnvasadoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EnvasadoPayload>
        }
        deleteMany: {
          args: Prisma.EnvasadoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EnvasadoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.EnvasadoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EnvasadoPayload>
        }
        aggregate: {
          args: Prisma.EnvasadoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEnvasado>
        }
        groupBy: {
          args: Prisma.EnvasadoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EnvasadoGroupByOutputType>[]
        }
        count: {
          args: Prisma.EnvasadoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EnvasadoCountAggregateOutputType> | number
        }
      }
    }
    PrimerProcesoEnv: {
      payload: Prisma.$PrimerProcesoEnvPayload<ExtArgs>
      fields: Prisma.PrimerProcesoEnvFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PrimerProcesoEnvFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoEnvPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PrimerProcesoEnvFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoEnvPayload>
        }
        findFirst: {
          args: Prisma.PrimerProcesoEnvFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoEnvPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PrimerProcesoEnvFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoEnvPayload>
        }
        findMany: {
          args: Prisma.PrimerProcesoEnvFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoEnvPayload>[]
        }
        create: {
          args: Prisma.PrimerProcesoEnvCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoEnvPayload>
        }
        createMany: {
          args: Prisma.PrimerProcesoEnvCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.PrimerProcesoEnvDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoEnvPayload>
        }
        update: {
          args: Prisma.PrimerProcesoEnvUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoEnvPayload>
        }
        deleteMany: {
          args: Prisma.PrimerProcesoEnvDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PrimerProcesoEnvUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.PrimerProcesoEnvUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoEnvPayload>
        }
        aggregate: {
          args: Prisma.PrimerProcesoEnvAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePrimerProcesoEnv>
        }
        groupBy: {
          args: Prisma.PrimerProcesoEnvGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PrimerProcesoEnvGroupByOutputType>[]
        }
        count: {
          args: Prisma.PrimerProcesoEnvCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PrimerProcesoEnvCountAggregateOutputType> | number
        }
      }
    }
    SegundoProcesoEnv: {
      payload: Prisma.$SegundoProcesoEnvPayload<ExtArgs>
      fields: Prisma.SegundoProcesoEnvFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SegundoProcesoEnvFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoEnvPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SegundoProcesoEnvFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoEnvPayload>
        }
        findFirst: {
          args: Prisma.SegundoProcesoEnvFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoEnvPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SegundoProcesoEnvFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoEnvPayload>
        }
        findMany: {
          args: Prisma.SegundoProcesoEnvFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoEnvPayload>[]
        }
        create: {
          args: Prisma.SegundoProcesoEnvCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoEnvPayload>
        }
        createMany: {
          args: Prisma.SegundoProcesoEnvCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.SegundoProcesoEnvDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoEnvPayload>
        }
        update: {
          args: Prisma.SegundoProcesoEnvUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoEnvPayload>
        }
        deleteMany: {
          args: Prisma.SegundoProcesoEnvDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SegundoProcesoEnvUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.SegundoProcesoEnvUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoEnvPayload>
        }
        aggregate: {
          args: Prisma.SegundoProcesoEnvAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSegundoProcesoEnv>
        }
        groupBy: {
          args: Prisma.SegundoProcesoEnvGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SegundoProcesoEnvGroupByOutputType>[]
        }
        count: {
          args: Prisma.SegundoProcesoEnvCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SegundoProcesoEnvCountAggregateOutputType> | number
        }
      }
    }
    TercerProcesoEnv: {
      payload: Prisma.$TercerProcesoEnvPayload<ExtArgs>
      fields: Prisma.TercerProcesoEnvFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TercerProcesoEnvFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoEnvPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TercerProcesoEnvFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoEnvPayload>
        }
        findFirst: {
          args: Prisma.TercerProcesoEnvFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoEnvPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TercerProcesoEnvFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoEnvPayload>
        }
        findMany: {
          args: Prisma.TercerProcesoEnvFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoEnvPayload>[]
        }
        create: {
          args: Prisma.TercerProcesoEnvCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoEnvPayload>
        }
        createMany: {
          args: Prisma.TercerProcesoEnvCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.TercerProcesoEnvDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoEnvPayload>
        }
        update: {
          args: Prisma.TercerProcesoEnvUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoEnvPayload>
        }
        deleteMany: {
          args: Prisma.TercerProcesoEnvDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TercerProcesoEnvUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.TercerProcesoEnvUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoEnvPayload>
        }
        aggregate: {
          args: Prisma.TercerProcesoEnvAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTercerProcesoEnv>
        }
        groupBy: {
          args: Prisma.TercerProcesoEnvGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TercerProcesoEnvGroupByOutputType>[]
        }
        count: {
          args: Prisma.TercerProcesoEnvCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TercerProcesoEnvCountAggregateOutputType> | number
        }
      }
    }
    ProcesoFinalEnv: {
      payload: Prisma.$ProcesoFinalEnvPayload<ExtArgs>
      fields: Prisma.ProcesoFinalEnvFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProcesoFinalEnvFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalEnvPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProcesoFinalEnvFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalEnvPayload>
        }
        findFirst: {
          args: Prisma.ProcesoFinalEnvFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalEnvPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProcesoFinalEnvFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalEnvPayload>
        }
        findMany: {
          args: Prisma.ProcesoFinalEnvFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalEnvPayload>[]
        }
        create: {
          args: Prisma.ProcesoFinalEnvCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalEnvPayload>
        }
        createMany: {
          args: Prisma.ProcesoFinalEnvCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.ProcesoFinalEnvDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalEnvPayload>
        }
        update: {
          args: Prisma.ProcesoFinalEnvUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalEnvPayload>
        }
        deleteMany: {
          args: Prisma.ProcesoFinalEnvDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProcesoFinalEnvUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.ProcesoFinalEnvUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalEnvPayload>
        }
        aggregate: {
          args: Prisma.ProcesoFinalEnvAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProcesoFinalEnv>
        }
        groupBy: {
          args: Prisma.ProcesoFinalEnvGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcesoFinalEnvGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProcesoFinalEnvCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcesoFinalEnvCountAggregateOutputType> | number
        }
      }
    }
    VueltasEnv: {
      payload: Prisma.$VueltasEnvPayload<ExtArgs>
      fields: Prisma.VueltasEnvFieldRefs
      operations: {
        findUnique: {
          args: Prisma.VueltasEnvFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasEnvPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.VueltasEnvFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasEnvPayload>
        }
        findFirst: {
          args: Prisma.VueltasEnvFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasEnvPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.VueltasEnvFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasEnvPayload>
        }
        findMany: {
          args: Prisma.VueltasEnvFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasEnvPayload>[]
        }
        create: {
          args: Prisma.VueltasEnvCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasEnvPayload>
        }
        createMany: {
          args: Prisma.VueltasEnvCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.VueltasEnvDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasEnvPayload>
        }
        update: {
          args: Prisma.VueltasEnvUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasEnvPayload>
        }
        deleteMany: {
          args: Prisma.VueltasEnvDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.VueltasEnvUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.VueltasEnvUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasEnvPayload>
        }
        aggregate: {
          args: Prisma.VueltasEnvAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateVueltasEnv>
        }
        groupBy: {
          args: Prisma.VueltasEnvGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VueltasEnvGroupByOutputType>[]
        }
        count: {
          args: Prisma.VueltasEnvCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VueltasEnvCountAggregateOutputType> | number
        }
      }
    }
    ParosEnv: {
      payload: Prisma.$ParosEnvPayload<ExtArgs>
      fields: Prisma.ParosEnvFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ParosEnvFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosEnvPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ParosEnvFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosEnvPayload>
        }
        findFirst: {
          args: Prisma.ParosEnvFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosEnvPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ParosEnvFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosEnvPayload>
        }
        findMany: {
          args: Prisma.ParosEnvFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosEnvPayload>[]
        }
        create: {
          args: Prisma.ParosEnvCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosEnvPayload>
        }
        createMany: {
          args: Prisma.ParosEnvCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.ParosEnvDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosEnvPayload>
        }
        update: {
          args: Prisma.ParosEnvUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosEnvPayload>
        }
        deleteMany: {
          args: Prisma.ParosEnvDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ParosEnvUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.ParosEnvUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosEnvPayload>
        }
        aggregate: {
          args: Prisma.ParosEnvAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateParosEnv>
        }
        groupBy: {
          args: Prisma.ParosEnvGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ParosEnvGroupByOutputType>[]
        }
        count: {
          args: Prisma.ParosEnvCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ParosEnvCountAggregateOutputType> | number
        }
      }
    }
    Molino: {
      payload: Prisma.$MolinoPayload<ExtArgs>
      fields: Prisma.MolinoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MolinoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MolinoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MolinoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MolinoPayload>
        }
        findFirst: {
          args: Prisma.MolinoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MolinoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MolinoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MolinoPayload>
        }
        findMany: {
          args: Prisma.MolinoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MolinoPayload>[]
        }
        create: {
          args: Prisma.MolinoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MolinoPayload>
        }
        createMany: {
          args: Prisma.MolinoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.MolinoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MolinoPayload>
        }
        update: {
          args: Prisma.MolinoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MolinoPayload>
        }
        deleteMany: {
          args: Prisma.MolinoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MolinoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.MolinoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MolinoPayload>
        }
        aggregate: {
          args: Prisma.MolinoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMolino>
        }
        groupBy: {
          args: Prisma.MolinoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MolinoGroupByOutputType>[]
        }
        count: {
          args: Prisma.MolinoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MolinoCountAggregateOutputType> | number
        }
      }
    }
    PrimerProcesoMol: {
      payload: Prisma.$PrimerProcesoMolPayload<ExtArgs>
      fields: Prisma.PrimerProcesoMolFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PrimerProcesoMolFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoMolPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PrimerProcesoMolFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoMolPayload>
        }
        findFirst: {
          args: Prisma.PrimerProcesoMolFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoMolPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PrimerProcesoMolFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoMolPayload>
        }
        findMany: {
          args: Prisma.PrimerProcesoMolFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoMolPayload>[]
        }
        create: {
          args: Prisma.PrimerProcesoMolCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoMolPayload>
        }
        createMany: {
          args: Prisma.PrimerProcesoMolCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.PrimerProcesoMolDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoMolPayload>
        }
        update: {
          args: Prisma.PrimerProcesoMolUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoMolPayload>
        }
        deleteMany: {
          args: Prisma.PrimerProcesoMolDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PrimerProcesoMolUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.PrimerProcesoMolUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PrimerProcesoMolPayload>
        }
        aggregate: {
          args: Prisma.PrimerProcesoMolAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePrimerProcesoMol>
        }
        groupBy: {
          args: Prisma.PrimerProcesoMolGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PrimerProcesoMolGroupByOutputType>[]
        }
        count: {
          args: Prisma.PrimerProcesoMolCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PrimerProcesoMolCountAggregateOutputType> | number
        }
      }
    }
    SegundoProcesoMol: {
      payload: Prisma.$SegundoProcesoMolPayload<ExtArgs>
      fields: Prisma.SegundoProcesoMolFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SegundoProcesoMolFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoMolPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SegundoProcesoMolFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoMolPayload>
        }
        findFirst: {
          args: Prisma.SegundoProcesoMolFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoMolPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SegundoProcesoMolFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoMolPayload>
        }
        findMany: {
          args: Prisma.SegundoProcesoMolFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoMolPayload>[]
        }
        create: {
          args: Prisma.SegundoProcesoMolCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoMolPayload>
        }
        createMany: {
          args: Prisma.SegundoProcesoMolCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.SegundoProcesoMolDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoMolPayload>
        }
        update: {
          args: Prisma.SegundoProcesoMolUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoMolPayload>
        }
        deleteMany: {
          args: Prisma.SegundoProcesoMolDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SegundoProcesoMolUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.SegundoProcesoMolUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SegundoProcesoMolPayload>
        }
        aggregate: {
          args: Prisma.SegundoProcesoMolAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSegundoProcesoMol>
        }
        groupBy: {
          args: Prisma.SegundoProcesoMolGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SegundoProcesoMolGroupByOutputType>[]
        }
        count: {
          args: Prisma.SegundoProcesoMolCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SegundoProcesoMolCountAggregateOutputType> | number
        }
      }
    }
    ParosMol: {
      payload: Prisma.$ParosMolPayload<ExtArgs>
      fields: Prisma.ParosMolFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ParosMolFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosMolPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ParosMolFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosMolPayload>
        }
        findFirst: {
          args: Prisma.ParosMolFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosMolPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ParosMolFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosMolPayload>
        }
        findMany: {
          args: Prisma.ParosMolFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosMolPayload>[]
        }
        create: {
          args: Prisma.ParosMolCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosMolPayload>
        }
        createMany: {
          args: Prisma.ParosMolCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.ParosMolDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosMolPayload>
        }
        update: {
          args: Prisma.ParosMolUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosMolPayload>
        }
        deleteMany: {
          args: Prisma.ParosMolDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ParosMolUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.ParosMolUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ParosMolPayload>
        }
        aggregate: {
          args: Prisma.ParosMolAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateParosMol>
        }
        groupBy: {
          args: Prisma.ParosMolGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ParosMolGroupByOutputType>[]
        }
        count: {
          args: Prisma.ParosMolCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ParosMolCountAggregateOutputType> | number
        }
      }
    }
    TercerProcesoMol: {
      payload: Prisma.$TercerProcesoMolPayload<ExtArgs>
      fields: Prisma.TercerProcesoMolFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TercerProcesoMolFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoMolPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TercerProcesoMolFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoMolPayload>
        }
        findFirst: {
          args: Prisma.TercerProcesoMolFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoMolPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TercerProcesoMolFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoMolPayload>
        }
        findMany: {
          args: Prisma.TercerProcesoMolFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoMolPayload>[]
        }
        create: {
          args: Prisma.TercerProcesoMolCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoMolPayload>
        }
        createMany: {
          args: Prisma.TercerProcesoMolCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.TercerProcesoMolDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoMolPayload>
        }
        update: {
          args: Prisma.TercerProcesoMolUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoMolPayload>
        }
        deleteMany: {
          args: Prisma.TercerProcesoMolDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TercerProcesoMolUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.TercerProcesoMolUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TercerProcesoMolPayload>
        }
        aggregate: {
          args: Prisma.TercerProcesoMolAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTercerProcesoMol>
        }
        groupBy: {
          args: Prisma.TercerProcesoMolGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TercerProcesoMolGroupByOutputType>[]
        }
        count: {
          args: Prisma.TercerProcesoMolCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TercerProcesoMolCountAggregateOutputType> | number
        }
      }
    }
    VueltasMol: {
      payload: Prisma.$VueltasMolPayload<ExtArgs>
      fields: Prisma.VueltasMolFieldRefs
      operations: {
        findUnique: {
          args: Prisma.VueltasMolFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasMolPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.VueltasMolFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasMolPayload>
        }
        findFirst: {
          args: Prisma.VueltasMolFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasMolPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.VueltasMolFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasMolPayload>
        }
        findMany: {
          args: Prisma.VueltasMolFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasMolPayload>[]
        }
        create: {
          args: Prisma.VueltasMolCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasMolPayload>
        }
        createMany: {
          args: Prisma.VueltasMolCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.VueltasMolDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasMolPayload>
        }
        update: {
          args: Prisma.VueltasMolUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasMolPayload>
        }
        deleteMany: {
          args: Prisma.VueltasMolDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.VueltasMolUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.VueltasMolUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VueltasMolPayload>
        }
        aggregate: {
          args: Prisma.VueltasMolAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateVueltasMol>
        }
        groupBy: {
          args: Prisma.VueltasMolGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VueltasMolGroupByOutputType>[]
        }
        count: {
          args: Prisma.VueltasMolCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VueltasMolCountAggregateOutputType> | number
        }
      }
    }
    ProcesoFinalMol: {
      payload: Prisma.$ProcesoFinalMolPayload<ExtArgs>
      fields: Prisma.ProcesoFinalMolFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProcesoFinalMolFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalMolPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProcesoFinalMolFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalMolPayload>
        }
        findFirst: {
          args: Prisma.ProcesoFinalMolFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalMolPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProcesoFinalMolFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalMolPayload>
        }
        findMany: {
          args: Prisma.ProcesoFinalMolFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalMolPayload>[]
        }
        create: {
          args: Prisma.ProcesoFinalMolCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalMolPayload>
        }
        createMany: {
          args: Prisma.ProcesoFinalMolCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.ProcesoFinalMolDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalMolPayload>
        }
        update: {
          args: Prisma.ProcesoFinalMolUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalMolPayload>
        }
        deleteMany: {
          args: Prisma.ProcesoFinalMolDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProcesoFinalMolUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.ProcesoFinalMolUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProcesoFinalMolPayload>
        }
        aggregate: {
          args: Prisma.ProcesoFinalMolAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProcesoFinalMol>
        }
        groupBy: {
          args: Prisma.ProcesoFinalMolGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcesoFinalMolGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProcesoFinalMolCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProcesoFinalMolCountAggregateOutputType> | number
        }
      }
    }
    Actividad: {
      payload: Prisma.$ActividadPayload<ExtArgs>
      fields: Prisma.ActividadFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ActividadFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActividadPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ActividadFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActividadPayload>
        }
        findFirst: {
          args: Prisma.ActividadFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActividadPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ActividadFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActividadPayload>
        }
        findMany: {
          args: Prisma.ActividadFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActividadPayload>[]
        }
        create: {
          args: Prisma.ActividadCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActividadPayload>
        }
        createMany: {
          args: Prisma.ActividadCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.ActividadDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActividadPayload>
        }
        update: {
          args: Prisma.ActividadUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActividadPayload>
        }
        deleteMany: {
          args: Prisma.ActividadDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ActividadUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.ActividadUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActividadPayload>
        }
        aggregate: {
          args: Prisma.ActividadAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateActividad>
        }
        groupBy: {
          args: Prisma.ActividadGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ActividadGroupByOutputType>[]
        }
        count: {
          args: Prisma.ActividadCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ActividadCountAggregateOutputType> | number
        }
      }
    }
    DetalleActividad: {
      payload: Prisma.$DetalleActividadPayload<ExtArgs>
      fields: Prisma.DetalleActividadFieldRefs
      operations: {
        findUnique: {
          args: Prisma.DetalleActividadFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DetalleActividadPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.DetalleActividadFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DetalleActividadPayload>
        }
        findFirst: {
          args: Prisma.DetalleActividadFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DetalleActividadPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.DetalleActividadFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DetalleActividadPayload>
        }
        findMany: {
          args: Prisma.DetalleActividadFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DetalleActividadPayload>[]
        }
        create: {
          args: Prisma.DetalleActividadCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DetalleActividadPayload>
        }
        createMany: {
          args: Prisma.DetalleActividadCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.DetalleActividadDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DetalleActividadPayload>
        }
        update: {
          args: Prisma.DetalleActividadUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DetalleActividadPayload>
        }
        deleteMany: {
          args: Prisma.DetalleActividadDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.DetalleActividadUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.DetalleActividadUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DetalleActividadPayload>
        }
        aggregate: {
          args: Prisma.DetalleActividadAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDetalleActividad>
        }
        groupBy: {
          args: Prisma.DetalleActividadGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DetalleActividadGroupByOutputType>[]
        }
        count: {
          args: Prisma.DetalleActividadCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DetalleActividadCountAggregateOutputType> | number
        }
      }
    }
    Barco: {
      payload: Prisma.$BarcoPayload<ExtArgs>
      fields: Prisma.BarcoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.BarcoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.BarcoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoPayload>
        }
        findFirst: {
          args: Prisma.BarcoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.BarcoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoPayload>
        }
        findMany: {
          args: Prisma.BarcoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoPayload>[]
        }
        create: {
          args: Prisma.BarcoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoPayload>
        }
        createMany: {
          args: Prisma.BarcoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.BarcoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoPayload>
        }
        update: {
          args: Prisma.BarcoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoPayload>
        }
        deleteMany: {
          args: Prisma.BarcoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.BarcoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.BarcoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoPayload>
        }
        aggregate: {
          args: Prisma.BarcoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBarco>
        }
        groupBy: {
          args: Prisma.BarcoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BarcoGroupByOutputType>[]
        }
        count: {
          args: Prisma.BarcoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BarcoCountAggregateOutputType> | number
        }
      }
    }
    Bitacora: {
      payload: Prisma.$BitacoraPayload<ExtArgs>
      fields: Prisma.BitacoraFieldRefs
      operations: {
        findUnique: {
          args: Prisma.BitacoraFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BitacoraPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.BitacoraFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BitacoraPayload>
        }
        findFirst: {
          args: Prisma.BitacoraFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BitacoraPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.BitacoraFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BitacoraPayload>
        }
        findMany: {
          args: Prisma.BitacoraFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BitacoraPayload>[]
        }
        create: {
          args: Prisma.BitacoraCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BitacoraPayload>
        }
        createMany: {
          args: Prisma.BitacoraCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.BitacoraDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BitacoraPayload>
        }
        update: {
          args: Prisma.BitacoraUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BitacoraPayload>
        }
        deleteMany: {
          args: Prisma.BitacoraDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.BitacoraUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.BitacoraUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BitacoraPayload>
        }
        aggregate: {
          args: Prisma.BitacoraAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBitacora>
        }
        groupBy: {
          args: Prisma.BitacoraGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BitacoraGroupByOutputType>[]
        }
        count: {
          args: Prisma.BitacoraCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BitacoraCountAggregateOutputType> | number
        }
      }
    }
    Operacion: {
      payload: Prisma.$OperacionPayload<ExtArgs>
      fields: Prisma.OperacionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OperacionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperacionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OperacionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperacionPayload>
        }
        findFirst: {
          args: Prisma.OperacionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperacionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OperacionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperacionPayload>
        }
        findMany: {
          args: Prisma.OperacionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperacionPayload>[]
        }
        create: {
          args: Prisma.OperacionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperacionPayload>
        }
        createMany: {
          args: Prisma.OperacionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.OperacionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperacionPayload>
        }
        update: {
          args: Prisma.OperacionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperacionPayload>
        }
        deleteMany: {
          args: Prisma.OperacionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OperacionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.OperacionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OperacionPayload>
        }
        aggregate: {
          args: Prisma.OperacionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOperacion>
        }
        groupBy: {
          args: Prisma.OperacionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OperacionGroupByOutputType>[]
        }
        count: {
          args: Prisma.OperacionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OperacionCountAggregateOutputType> | number
        }
      }
    }
    Equipo: {
      payload: Prisma.$EquipoPayload<ExtArgs>
      fields: Prisma.EquipoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EquipoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EquipoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipoPayload>
        }
        findFirst: {
          args: Prisma.EquipoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EquipoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipoPayload>
        }
        findMany: {
          args: Prisma.EquipoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipoPayload>[]
        }
        create: {
          args: Prisma.EquipoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipoPayload>
        }
        createMany: {
          args: Prisma.EquipoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.EquipoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipoPayload>
        }
        update: {
          args: Prisma.EquipoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipoPayload>
        }
        deleteMany: {
          args: Prisma.EquipoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EquipoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.EquipoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EquipoPayload>
        }
        aggregate: {
          args: Prisma.EquipoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEquipo>
        }
        groupBy: {
          args: Prisma.EquipoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EquipoGroupByOutputType>[]
        }
        count: {
          args: Prisma.EquipoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EquipoCountAggregateOutputType> | number
        }
      }
    }
    Ticket: {
      payload: Prisma.$TicketPayload<ExtArgs>
      fields: Prisma.TicketFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TicketFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TicketPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TicketFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TicketPayload>
        }
        findFirst: {
          args: Prisma.TicketFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TicketPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TicketFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TicketPayload>
        }
        findMany: {
          args: Prisma.TicketFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TicketPayload>[]
        }
        create: {
          args: Prisma.TicketCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TicketPayload>
        }
        createMany: {
          args: Prisma.TicketCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.TicketDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TicketPayload>
        }
        update: {
          args: Prisma.TicketUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TicketPayload>
        }
        deleteMany: {
          args: Prisma.TicketDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TicketUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.TicketUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TicketPayload>
        }
        aggregate: {
          args: Prisma.TicketAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTicket>
        }
        groupBy: {
          args: Prisma.TicketGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TicketGroupByOutputType>[]
        }
        count: {
          args: Prisma.TicketCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TicketCountAggregateOutputType> | number
        }
      }
    }
    Mensaje: {
      payload: Prisma.$MensajePayload<ExtArgs>
      fields: Prisma.MensajeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MensajeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MensajePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MensajeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MensajePayload>
        }
        findFirst: {
          args: Prisma.MensajeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MensajePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MensajeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MensajePayload>
        }
        findMany: {
          args: Prisma.MensajeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MensajePayload>[]
        }
        create: {
          args: Prisma.MensajeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MensajePayload>
        }
        createMany: {
          args: Prisma.MensajeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.MensajeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MensajePayload>
        }
        update: {
          args: Prisma.MensajeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MensajePayload>
        }
        deleteMany: {
          args: Prisma.MensajeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MensajeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.MensajeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MensajePayload>
        }
        aggregate: {
          args: Prisma.MensajeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMensaje>
        }
        groupBy: {
          args: Prisma.MensajeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MensajeGroupByOutputType>[]
        }
        count: {
          args: Prisma.MensajeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MensajeCountAggregateOutputType> | number
        }
      }
    }
    Producto: {
      payload: Prisma.$ProductoPayload<ExtArgs>
      fields: Prisma.ProductoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProductoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProductoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>
        }
        findFirst: {
          args: Prisma.ProductoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProductoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>
        }
        findMany: {
          args: Prisma.ProductoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>[]
        }
        create: {
          args: Prisma.ProductoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>
        }
        createMany: {
          args: Prisma.ProductoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.ProductoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>
        }
        update: {
          args: Prisma.ProductoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>
        }
        deleteMany: {
          args: Prisma.ProductoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProductoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.ProductoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>
        }
        aggregate: {
          args: Prisma.ProductoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProducto>
        }
        groupBy: {
          args: Prisma.ProductoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductoGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProductoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductoCountAggregateOutputType> | number
        }
      }
    }
    BarcoRecepcion: {
      payload: Prisma.$BarcoRecepcionPayload<ExtArgs>
      fields: Prisma.BarcoRecepcionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.BarcoRecepcionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoRecepcionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.BarcoRecepcionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoRecepcionPayload>
        }
        findFirst: {
          args: Prisma.BarcoRecepcionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoRecepcionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.BarcoRecepcionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoRecepcionPayload>
        }
        findMany: {
          args: Prisma.BarcoRecepcionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoRecepcionPayload>[]
        }
        create: {
          args: Prisma.BarcoRecepcionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoRecepcionPayload>
        }
        createMany: {
          args: Prisma.BarcoRecepcionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.BarcoRecepcionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoRecepcionPayload>
        }
        update: {
          args: Prisma.BarcoRecepcionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoRecepcionPayload>
        }
        deleteMany: {
          args: Prisma.BarcoRecepcionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.BarcoRecepcionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.BarcoRecepcionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BarcoRecepcionPayload>
        }
        aggregate: {
          args: Prisma.BarcoRecepcionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBarcoRecepcion>
        }
        groupBy: {
          args: Prisma.BarcoRecepcionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BarcoRecepcionGroupByOutputType>[]
        }
        count: {
          args: Prisma.BarcoRecepcionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BarcoRecepcionCountAggregateOutputType> | number
        }
      }
    }
    RecepcionTraslado: {
      payload: Prisma.$RecepcionTrasladoPayload<ExtArgs>
      fields: Prisma.RecepcionTrasladoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RecepcionTrasladoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RecepcionTrasladoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RecepcionTrasladoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RecepcionTrasladoPayload>
        }
        findFirst: {
          args: Prisma.RecepcionTrasladoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RecepcionTrasladoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RecepcionTrasladoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RecepcionTrasladoPayload>
        }
        findMany: {
          args: Prisma.RecepcionTrasladoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RecepcionTrasladoPayload>[]
        }
        create: {
          args: Prisma.RecepcionTrasladoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RecepcionTrasladoPayload>
        }
        createMany: {
          args: Prisma.RecepcionTrasladoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.RecepcionTrasladoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RecepcionTrasladoPayload>
        }
        update: {
          args: Prisma.RecepcionTrasladoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RecepcionTrasladoPayload>
        }
        deleteMany: {
          args: Prisma.RecepcionTrasladoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RecepcionTrasladoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.RecepcionTrasladoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RecepcionTrasladoPayload>
        }
        aggregate: {
          args: Prisma.RecepcionTrasladoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRecepcionTraslado>
        }
        groupBy: {
          args: Prisma.RecepcionTrasladoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RecepcionTrasladoGroupByOutputType>[]
        }
        count: {
          args: Prisma.RecepcionTrasladoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RecepcionTrasladoCountAggregateOutputType> | number
        }
      }
    }
    EmpresaTransporte: {
      payload: Prisma.$EmpresaTransportePayload<ExtArgs>
      fields: Prisma.EmpresaTransporteFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EmpresaTransporteFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmpresaTransportePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EmpresaTransporteFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmpresaTransportePayload>
        }
        findFirst: {
          args: Prisma.EmpresaTransporteFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmpresaTransportePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EmpresaTransporteFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmpresaTransportePayload>
        }
        findMany: {
          args: Prisma.EmpresaTransporteFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmpresaTransportePayload>[]
        }
        create: {
          args: Prisma.EmpresaTransporteCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmpresaTransportePayload>
        }
        createMany: {
          args: Prisma.EmpresaTransporteCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.EmpresaTransporteDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmpresaTransportePayload>
        }
        update: {
          args: Prisma.EmpresaTransporteUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmpresaTransportePayload>
        }
        deleteMany: {
          args: Prisma.EmpresaTransporteDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EmpresaTransporteUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.EmpresaTransporteUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmpresaTransportePayload>
        }
        aggregate: {
          args: Prisma.EmpresaTransporteAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEmpresaTransporte>
        }
        groupBy: {
          args: Prisma.EmpresaTransporteGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EmpresaTransporteGroupByOutputType>[]
        }
        count: {
          args: Prisma.EmpresaTransporteCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EmpresaTransporteCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  nombreCompleto: 'nombreCompleto',
  codigo: 'codigo',
  email: 'email',
  password: 'password',
  eliminado: 'eliminado',
  activo: 'activo',
  createdAt: 'createdAt',
  roleId: 'roleId'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const RoleScalarFieldEnum = {
  id: 'id',
  name: 'name'
} as const

export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


export const SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
} as const

export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


export const DemoraScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userName: 'userName',
  fechaInicio: 'fechaInicio',
  tiempoTotal: 'tiempoTotal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type DemoraScalarFieldEnum = (typeof DemoraScalarFieldEnum)[keyof typeof DemoraScalarFieldEnum]


export const PrimerProcesoScalarFieldEnum = {
  id: 'id',
  demoraId: 'demoraId',
  numeroTransaccion: 'numeroTransaccion',
  pesadorEntrada: 'pesadorEntrada',
  porteriaEntrada: 'porteriaEntrada',
  metodoCarga: 'metodoCarga',
  numeroEjes: 'numeroEjes',
  puntoDespacho: 'puntoDespacho',
  basculaEntrada: 'basculaEntrada',
  condicion: 'condicion',
  tiempoScanner: 'tiempoScanner',
  fechaScanner: 'fechaScanner',
  scannerObservaciones: 'scannerObservaciones',
  tiempoPrechequeo: 'tiempoPrechequeo',
  fechaPrechequeo: 'fechaPrechequeo',
  prechequeoObservaciones: 'prechequeoObservaciones',
  tiempoAutorizacion: 'tiempoAutorizacion',
  fechaAutorizacion: 'fechaAutorizacion',
  autorizacionObservaciones: 'autorizacionObservaciones',
  tiempoIngresoPlanta: 'tiempoIngresoPlanta',
  ingresoPlantaObservaciones: 'ingresoPlantaObservaciones',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PrimerProcesoScalarFieldEnum = (typeof PrimerProcesoScalarFieldEnum)[keyof typeof PrimerProcesoScalarFieldEnum]


export const SegundoProcesoScalarFieldEnum = {
  id: 'id',
  demoraId: 'demoraId',
  operador: 'operador',
  enlonador: 'enlonador',
  modeloEquipo: 'modeloEquipo',
  personalAsignado: 'personalAsignado',
  personalAsignadoObservaciones: 'personalAsignadoObservaciones',
  tiempoLlegadaPunto: 'tiempoLlegadaPunto',
  llegadaPuntoObservaciones: 'llegadaPuntoObservaciones',
  tiempoLlegadaOperador: 'tiempoLlegadaOperador',
  llegadaOperadorObservaciones: 'llegadaOperadorObservaciones',
  tiempoLlegadaEnlonador: 'tiempoLlegadaEnlonador',
  llegadaEnlonadorObservaciones: 'llegadaEnlonadorObservaciones',
  tiempoLlegadaEquipo: 'tiempoLlegadaEquipo',
  llegadaEquipoObservaciones: 'llegadaEquipoObservaciones',
  tiempoInicioCarga: 'tiempoInicioCarga',
  inicioCargaObservaciones: 'inicioCargaObservaciones',
  tiempoTerminaCarga: 'tiempoTerminaCarga',
  terminaCargaObservaciones: 'terminaCargaObservaciones',
  tiempoSalidaPunto: 'tiempoSalidaPunto',
  salidaPuntoObservaciones: 'salidaPuntoObservaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type SegundoProcesoScalarFieldEnum = (typeof SegundoProcesoScalarFieldEnum)[keyof typeof SegundoProcesoScalarFieldEnum]


export const TercerProcesoScalarFieldEnum = {
  id: 'id',
  demoraId: 'demoraId',
  basculaSalida: 'basculaSalida',
  pesadorSalida: 'pesadorSalida',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TercerProcesoScalarFieldEnum = (typeof TercerProcesoScalarFieldEnum)[keyof typeof TercerProcesoScalarFieldEnum]


export const VueltasScalarFieldEnum = {
  id: 'id',
  tercerProcesoId: 'tercerProcesoId',
  numeroVuelta: 'numeroVuelta',
  tiempoLlegadaPunto: 'tiempoLlegadaPunto',
  llegadaPuntoObservaciones: 'llegadaPuntoObservaciones',
  tiempoSalidaPunto: 'tiempoSalidaPunto',
  salidaPuntoObservaciones: 'salidaPuntoObservaciones',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type VueltasScalarFieldEnum = (typeof VueltasScalarFieldEnum)[keyof typeof VueltasScalarFieldEnum]


export const ProcesoFinalScalarFieldEnum = {
  id: 'id',
  demoraId: 'demoraId',
  tiempoSalidaPlanta: 'tiempoSalidaPlanta',
  salidaPlantaObservaciones: 'salidaPlantaObservaciones',
  porteriaSalida: 'porteriaSalida',
  tiempoLlegadaPorteria: 'tiempoLlegadaPorteria',
  llegadaPorteriaObservaciones: 'llegadaPorteriaObservaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProcesoFinalScalarFieldEnum = (typeof ProcesoFinalScalarFieldEnum)[keyof typeof ProcesoFinalScalarFieldEnum]


export const EnvasadoScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userName: 'userName',
  fechaInicio: 'fechaInicio',
  tiempoTotal: 'tiempoTotal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type EnvasadoScalarFieldEnum = (typeof EnvasadoScalarFieldEnum)[keyof typeof EnvasadoScalarFieldEnum]


export const PrimerProcesoEnvScalarFieldEnum = {
  id: 'id',
  envasadoId: 'envasadoId',
  numeroTransaccion: 'numeroTransaccion',
  numeroOrden: 'numeroOrden',
  pesadorEntrada: 'pesadorEntrada',
  porteriaEntrada: 'porteriaEntrada',
  metodoCarga: 'metodoCarga',
  numeroEjes: 'numeroEjes',
  puntoDespacho: 'puntoDespacho',
  puntoEnvasado: 'puntoEnvasado',
  basculaEntrada: 'basculaEntrada',
  condicion: 'condicion',
  tiempoScanner: 'tiempoScanner',
  fechaScanner: 'fechaScanner',
  scannerObservaciones: 'scannerObservaciones',
  tiempoPrechequeo: 'tiempoPrechequeo',
  fechaPrechequeo: 'fechaPrechequeo',
  prechequeoObservaciones: 'prechequeoObservaciones',
  tiempoAutorizacion: 'tiempoAutorizacion',
  fechaAutorizacion: 'fechaAutorizacion',
  autorizacionObservaciones: 'autorizacionObservaciones',
  tiempoIngresoPlanta: 'tiempoIngresoPlanta',
  ingresoPlantaObservaciones: 'ingresoPlantaObservaciones',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PrimerProcesoEnvScalarFieldEnum = (typeof PrimerProcesoEnvScalarFieldEnum)[keyof typeof PrimerProcesoEnvScalarFieldEnum]


export const SegundoProcesoEnvScalarFieldEnum = {
  id: 'id',
  envasadoId: 'envasadoId',
  operador: 'operador',
  grupo: 'grupo',
  modeloEquipo: 'modeloEquipo',
  personalAsignado: 'personalAsignado',
  personalAsignadoObservaciones: 'personalAsignadoObservaciones',
  parosStatsTotalParos: 'parosStatsTotalParos',
  parosStatsTiempoTotalParos: 'parosStatsTiempoTotalParos',
  tiempoLlegadaPunto: 'tiempoLlegadaPunto',
  llegadaPuntoObservaciones: 'llegadaPuntoObservaciones',
  tiempoLlegadaOperador: 'tiempoLlegadaOperador',
  llegadaOperadorObservaciones: 'llegadaOperadorObservaciones',
  tiempoLlegadaGrupo: 'tiempoLlegadaGrupo',
  llegadaGrupoObservaciones: 'llegadaGrupoObservaciones',
  tiempoLlegadaEquipo: 'tiempoLlegadaEquipo',
  llegadaEquipoObservaciones: 'llegadaEquipoObservaciones',
  tiempoInicioCarga: 'tiempoInicioCarga',
  inicioCargaObservaciones: 'inicioCargaObservaciones',
  tiempoTerminaCarga: 'tiempoTerminaCarga',
  terminaCargaObservaciones: 'terminaCargaObservaciones',
  tiempoSalidaPunto: 'tiempoSalidaPunto',
  salidaPuntoObservaciones: 'salidaPuntoObservaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type SegundoProcesoEnvScalarFieldEnum = (typeof SegundoProcesoEnvScalarFieldEnum)[keyof typeof SegundoProcesoEnvScalarFieldEnum]


export const TercerProcesoEnvScalarFieldEnum = {
  id: 'id',
  envasadoId: 'envasadoId',
  basculaSalida: 'basculaSalida',
  pesadorSalida: 'pesadorSalida',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TercerProcesoEnvScalarFieldEnum = (typeof TercerProcesoEnvScalarFieldEnum)[keyof typeof TercerProcesoEnvScalarFieldEnum]


export const ProcesoFinalEnvScalarFieldEnum = {
  id: 'id',
  envasadoId: 'envasadoId',
  tiempoSalidaPlanta: 'tiempoSalidaPlanta',
  salidaPlantaObservaciones: 'salidaPlantaObservaciones',
  porteriaSalida: 'porteriaSalida',
  tiempoLlegadaPorteria: 'tiempoLlegadaPorteria',
  llegadaPorteriaObservaciones: 'llegadaPorteriaObservaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProcesoFinalEnvScalarFieldEnum = (typeof ProcesoFinalEnvScalarFieldEnum)[keyof typeof ProcesoFinalEnvScalarFieldEnum]


export const VueltasEnvScalarFieldEnum = {
  id: 'id',
  tercerProcesoEnvId: 'tercerProcesoEnvId',
  numeroVuelta: 'numeroVuelta',
  tiempoLlegadaPunto: 'tiempoLlegadaPunto',
  llegadaPuntoObservaciones: 'llegadaPuntoObservaciones',
  tiempoSalidaPunto: 'tiempoSalidaPunto',
  salidaPuntoObservaciones: 'salidaPuntoObservaciones',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type VueltasEnvScalarFieldEnum = (typeof VueltasEnvScalarFieldEnum)[keyof typeof VueltasEnvScalarFieldEnum]


export const ParosEnvScalarFieldEnum = {
  id: 'id',
  segundoProcesoEnvId: 'segundoProcesoEnvId',
  inicio: 'inicio',
  fin: 'fin',
  razon: 'razon',
  diffCargaInicio: 'diffCargaInicio',
  duracionParo: 'duracionParo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ParosEnvScalarFieldEnum = (typeof ParosEnvScalarFieldEnum)[keyof typeof ParosEnvScalarFieldEnum]


export const MolinoScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userName: 'userName',
  fechaInicio: 'fechaInicio',
  tiempoTotal: 'tiempoTotal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MolinoScalarFieldEnum = (typeof MolinoScalarFieldEnum)[keyof typeof MolinoScalarFieldEnum]


export const PrimerProcesoMolScalarFieldEnum = {
  id: 'id',
  molId: 'molId',
  numeroTransaccion: 'numeroTransaccion',
  numeroOrden: 'numeroOrden',
  numeroCriba: 'numeroCriba',
  numeroMolino: 'numeroMolino',
  pesadorEntrada: 'pesadorEntrada',
  porteriaEntrada: 'porteriaEntrada',
  presentacion: 'presentacion',
  puntoDespacho: 'puntoDespacho',
  puntoEnvasado: 'puntoEnvasado',
  basculaEntrada: 'basculaEntrada',
  metodoCarga: 'metodoCarga',
  numeroEjes: 'numeroEjes',
  condicion: 'condicion',
  tiempoScanner: 'tiempoScanner',
  fechaScanner: 'fechaScanner',
  scannerObservaciones: 'scannerObservaciones',
  tiempoPrechequeo: 'tiempoPrechequeo',
  fechaPrechequeo: 'fechaPrechequeo',
  prechequeoObservaciones: 'prechequeoObservaciones',
  tiempoAutorizacion: 'tiempoAutorizacion',
  fechaAutorizacion: 'fechaAutorizacion',
  autorizacionObservaciones: 'autorizacionObservaciones',
  tiempoIngresoPlanta: 'tiempoIngresoPlanta',
  ingresoPlantaObservaciones: 'ingresoPlantaObservaciones',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PrimerProcesoMolScalarFieldEnum = (typeof PrimerProcesoMolScalarFieldEnum)[keyof typeof PrimerProcesoMolScalarFieldEnum]


export const SegundoProcesoMolScalarFieldEnum = {
  id: 'id',
  molId: 'molId',
  operador: 'operador',
  grupo: 'grupo',
  modeloEquipo: 'modeloEquipo',
  personalAsignado: 'personalAsignado',
  personalAsignadoObservaciones: 'personalAsignadoObservaciones',
  parosStatsTotalParos: 'parosStatsTotalParos',
  parosStatsTiempoTotalParos: 'parosStatsTiempoTotalParos',
  tiempoLlegadaPunto: 'tiempoLlegadaPunto',
  llegadaPuntoObservaciones: 'llegadaPuntoObservaciones',
  tiempoLlegadaOperador: 'tiempoLlegadaOperador',
  llegadaOperadorObservaciones: 'llegadaOperadorObservaciones',
  tiempoLlegadaGrupo: 'tiempoLlegadaGrupo',
  llegadaGrupoObservaciones: 'llegadaGrupoObservaciones',
  tiempoLlegadaEquipo: 'tiempoLlegadaEquipo',
  llegadaEquipoObservaciones: 'llegadaEquipoObservaciones',
  tiempoInicioCarga: 'tiempoInicioCarga',
  inicioCargaObservaciones: 'inicioCargaObservaciones',
  tiempoTerminaCarga: 'tiempoTerminaCarga',
  terminaCargaObservaciones: 'terminaCargaObservaciones',
  tiempoInicioMolido: 'tiempoInicioMolido',
  inicioMolidoObservaciones: 'inicioMolidoObservaciones',
  tiempoTerminaMolido: 'tiempoTerminaMolido',
  terminaMolidoObservaciones: 'terminaMolidoObservaciones',
  tiempoSalidaPunto: 'tiempoSalidaPunto',
  salidaPuntoObservaciones: 'salidaPuntoObservaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type SegundoProcesoMolScalarFieldEnum = (typeof SegundoProcesoMolScalarFieldEnum)[keyof typeof SegundoProcesoMolScalarFieldEnum]


export const ParosMolScalarFieldEnum = {
  id: 'id',
  segundoProcesoMolId: 'segundoProcesoMolId',
  inicio: 'inicio',
  fin: 'fin',
  razon: 'razon',
  diffCargaInicio: 'diffCargaInicio',
  duracionParo: 'duracionParo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ParosMolScalarFieldEnum = (typeof ParosMolScalarFieldEnum)[keyof typeof ParosMolScalarFieldEnum]


export const TercerProcesoMolScalarFieldEnum = {
  id: 'id',
  molId: 'molId',
  basculaSalida: 'basculaSalida',
  pesadorSalida: 'pesadorSalida',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TercerProcesoMolScalarFieldEnum = (typeof TercerProcesoMolScalarFieldEnum)[keyof typeof TercerProcesoMolScalarFieldEnum]


export const VueltasMolScalarFieldEnum = {
  id: 'id',
  tercerProcesoMolId: 'tercerProcesoMolId',
  numeroVuelta: 'numeroVuelta',
  tiempoLlegadaPunto: 'tiempoLlegadaPunto',
  llegadaPuntoObservaciones: 'llegadaPuntoObservaciones',
  tiempoSalidaPunto: 'tiempoSalidaPunto',
  salidaPuntoObservaciones: 'salidaPuntoObservaciones',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type VueltasMolScalarFieldEnum = (typeof VueltasMolScalarFieldEnum)[keyof typeof VueltasMolScalarFieldEnum]


export const ProcesoFinalMolScalarFieldEnum = {
  id: 'id',
  molId: 'molId',
  tiempoSalidaPlanta: 'tiempoSalidaPlanta',
  salidaPlantaObservaciones: 'salidaPlantaObservaciones',
  porteriaSalida: 'porteriaSalida',
  tiempoLlegadaPorteria: 'tiempoLlegadaPorteria',
  llegadaPorteriaObservaciones: 'llegadaPorteriaObservaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProcesoFinalMolScalarFieldEnum = (typeof ProcesoFinalMolScalarFieldEnum)[keyof typeof ProcesoFinalMolScalarFieldEnum]


export const ActividadScalarFieldEnum = {
  id: 'id',
  fecha: 'fecha',
  userId: 'userId',
  userName: 'userName',
  totalActividades: 'totalActividades',
  totalDuracion: 'totalDuracion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ActividadScalarFieldEnum = (typeof ActividadScalarFieldEnum)[keyof typeof ActividadScalarFieldEnum]


export const DetalleActividadScalarFieldEnum = {
  id: 'id',
  actividadId: 'actividadId',
  activity: 'activity',
  startTime: 'startTime',
  endTime: 'endTime',
  duration: 'duration',
  responsables: 'responsables',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type DetalleActividadScalarFieldEnum = (typeof DetalleActividadScalarFieldEnum)[keyof typeof DetalleActividadScalarFieldEnum]


export const BarcoScalarFieldEnum = {
  id: 'id',
  muelle: 'muelle',
  vaporBarco: 'vaporBarco',
  fechaArribo: 'fechaArribo',
  horaArribo: 'horaArribo',
  fechaAtraque: 'fechaAtraque',
  horaAtraque: 'horaAtraque',
  fechaRecibido: 'fechaRecibido',
  horaRecibido: 'horaRecibido',
  fechaInicioOperaciones: 'fechaInicioOperaciones',
  horaInicioOperaciones: 'horaInicioOperaciones',
  fechaFinOperaciones: 'fechaFinOperaciones',
  horaFinOperaciones: 'horaFinOperaciones',
  tipoCarga: 'tipoCarga',
  sistemaUtilizado: 'sistemaUtilizado',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type BarcoScalarFieldEnum = (typeof BarcoScalarFieldEnum)[keyof typeof BarcoScalarFieldEnum]


export const BitacoraScalarFieldEnum = {
  id: 'id',
  fechaInicio: 'fechaInicio',
  fecha: 'fecha',
  fechaCierre: 'fechaCierre',
  nombreMuellero: 'nombreMuellero',
  turnoInicio: 'turnoInicio',
  turnoFin: 'turnoFin',
  observaciones: 'observaciones',
  barcoId: 'barcoId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type BitacoraScalarFieldEnum = (typeof BitacoraScalarFieldEnum)[keyof typeof BitacoraScalarFieldEnum]


export const OperacionScalarFieldEnum = {
  id: 'id',
  bodega: 'bodega',
  inicio: 'inicio',
  final: 'final',
  minutos: 'minutos',
  actividad: 'actividad',
  bitacoraId: 'bitacoraId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type OperacionScalarFieldEnum = (typeof OperacionScalarFieldEnum)[keyof typeof OperacionScalarFieldEnum]


export const EquipoScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userName: 'userName',
  equipo: 'equipo',
  horometro: 'horometro',
  operador: 'operador',
  fecha: 'fecha',
  hora: 'hora',
  horaFin: 'horaFin',
  tiempoTotal: 'tiempoTotal',
  horaDe: 'horaDe',
  horaA: 'horaA',
  recomendaciones: 'recomendaciones',
  inspecciones: 'inspecciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type EquipoScalarFieldEnum = (typeof EquipoScalarFieldEnum)[keyof typeof EquipoScalarFieldEnum]


export const TicketScalarFieldEnum = {
  id: 'id',
  numero: 'numero',
  fecha: 'fecha',
  hora: 'hora',
  userName: 'userName',
  userId: 'userId',
  asunto: 'asunto',
  descripcion: 'descripcion',
  imagenUrl: 'imagenUrl',
  imagenPublicId: 'imagenPublicId',
  estado: 'estado',
  assignedTo: 'assignedTo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type TicketScalarFieldEnum = (typeof TicketScalarFieldEnum)[keyof typeof TicketScalarFieldEnum]


export const MensajeScalarFieldEnum = {
  id: 'id',
  ticketId: 'ticketId',
  senderId: 'senderId',
  receiverId: 'receiverId',
  text: 'text',
  imageUrl: 'imageUrl',
  imagenPublicId: 'imagenPublicId',
  delivered: 'delivered',
  read: 'read',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MensajeScalarFieldEnum = (typeof MensajeScalarFieldEnum)[keyof typeof MensajeScalarFieldEnum]


export const ProductoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type ProductoScalarFieldEnum = (typeof ProductoScalarFieldEnum)[keyof typeof ProductoScalarFieldEnum]


export const BarcoRecepcionScalarFieldEnum = {
  id: 'id',
  vaporBarco: 'vaporBarco',
  productos: 'productos',
  puntosDescarga: 'puntosDescarga',
  transportes: 'transportes',
  observaciones: 'observaciones',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type BarcoRecepcionScalarFieldEnum = (typeof BarcoRecepcionScalarFieldEnum)[keyof typeof BarcoRecepcionScalarFieldEnum]


export const RecepcionTrasladoScalarFieldEnum = {
  id: 'id',
  barcoId: 'barcoId',
  userId: 'userId',
  userName: 'userName',
  fecha: 'fecha',
  hora: 'hora',
  producto: 'producto',
  nombreBarco: 'nombreBarco',
  chequero: 'chequero',
  turnoInicio: 'turnoInicio',
  turnoFin: 'turnoFin',
  puntoCarga: 'puntoCarga',
  puntoDescarga: 'puntoDescarga',
  bitacoras: 'bitacoras',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type RecepcionTrasladoScalarFieldEnum = (typeof RecepcionTrasladoScalarFieldEnum)[keyof typeof RecepcionTrasladoScalarFieldEnum]


export const EmpresaTransporteScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  motoristas: 'motoristas',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type EmpresaTransporteScalarFieldEnum = (typeof EmpresaTransporteScalarFieldEnum)[keyof typeof EmpresaTransporteScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const UserOrderByRelevanceFieldEnum = {
  username: 'username',
  nombreCompleto: 'nombreCompleto',
  codigo: 'codigo',
  email: 'email',
  password: 'password'
} as const

export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


export const RoleOrderByRelevanceFieldEnum = {
  name: 'name'
} as const

export type RoleOrderByRelevanceFieldEnum = (typeof RoleOrderByRelevanceFieldEnum)[keyof typeof RoleOrderByRelevanceFieldEnum]


export const SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken'
} as const

export type SessionOrderByRelevanceFieldEnum = (typeof SessionOrderByRelevanceFieldEnum)[keyof typeof SessionOrderByRelevanceFieldEnum]


export const DemoraOrderByRelevanceFieldEnum = {
  userName: 'userName',
  fechaInicio: 'fechaInicio',
  tiempoTotal: 'tiempoTotal'
} as const

export type DemoraOrderByRelevanceFieldEnum = (typeof DemoraOrderByRelevanceFieldEnum)[keyof typeof DemoraOrderByRelevanceFieldEnum]


export const PrimerProcesoOrderByRelevanceFieldEnum = {
  numeroTransaccion: 'numeroTransaccion',
  pesadorEntrada: 'pesadorEntrada',
  porteriaEntrada: 'porteriaEntrada',
  metodoCarga: 'metodoCarga',
  numeroEjes: 'numeroEjes',
  puntoDespacho: 'puntoDespacho',
  basculaEntrada: 'basculaEntrada',
  condicion: 'condicion',
  tiempoScanner: 'tiempoScanner',
  fechaScanner: 'fechaScanner',
  scannerObservaciones: 'scannerObservaciones',
  tiempoPrechequeo: 'tiempoPrechequeo',
  fechaPrechequeo: 'fechaPrechequeo',
  prechequeoObservaciones: 'prechequeoObservaciones',
  tiempoAutorizacion: 'tiempoAutorizacion',
  fechaAutorizacion: 'fechaAutorizacion',
  autorizacionObservaciones: 'autorizacionObservaciones',
  tiempoIngresoPlanta: 'tiempoIngresoPlanta',
  ingresoPlantaObservaciones: 'ingresoPlantaObservaciones',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones'
} as const

export type PrimerProcesoOrderByRelevanceFieldEnum = (typeof PrimerProcesoOrderByRelevanceFieldEnum)[keyof typeof PrimerProcesoOrderByRelevanceFieldEnum]


export const SegundoProcesoOrderByRelevanceFieldEnum = {
  operador: 'operador',
  enlonador: 'enlonador',
  modeloEquipo: 'modeloEquipo',
  personalAsignadoObservaciones: 'personalAsignadoObservaciones',
  tiempoLlegadaPunto: 'tiempoLlegadaPunto',
  llegadaPuntoObservaciones: 'llegadaPuntoObservaciones',
  tiempoLlegadaOperador: 'tiempoLlegadaOperador',
  llegadaOperadorObservaciones: 'llegadaOperadorObservaciones',
  tiempoLlegadaEnlonador: 'tiempoLlegadaEnlonador',
  llegadaEnlonadorObservaciones: 'llegadaEnlonadorObservaciones',
  tiempoLlegadaEquipo: 'tiempoLlegadaEquipo',
  llegadaEquipoObservaciones: 'llegadaEquipoObservaciones',
  tiempoInicioCarga: 'tiempoInicioCarga',
  inicioCargaObservaciones: 'inicioCargaObservaciones',
  tiempoTerminaCarga: 'tiempoTerminaCarga',
  terminaCargaObservaciones: 'terminaCargaObservaciones',
  tiempoSalidaPunto: 'tiempoSalidaPunto',
  salidaPuntoObservaciones: 'salidaPuntoObservaciones'
} as const

export type SegundoProcesoOrderByRelevanceFieldEnum = (typeof SegundoProcesoOrderByRelevanceFieldEnum)[keyof typeof SegundoProcesoOrderByRelevanceFieldEnum]


export const TercerProcesoOrderByRelevanceFieldEnum = {
  basculaSalida: 'basculaSalida',
  pesadorSalida: 'pesadorSalida',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones'
} as const

export type TercerProcesoOrderByRelevanceFieldEnum = (typeof TercerProcesoOrderByRelevanceFieldEnum)[keyof typeof TercerProcesoOrderByRelevanceFieldEnum]


export const VueltasOrderByRelevanceFieldEnum = {
  tiempoLlegadaPunto: 'tiempoLlegadaPunto',
  llegadaPuntoObservaciones: 'llegadaPuntoObservaciones',
  tiempoSalidaPunto: 'tiempoSalidaPunto',
  salidaPuntoObservaciones: 'salidaPuntoObservaciones',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones'
} as const

export type VueltasOrderByRelevanceFieldEnum = (typeof VueltasOrderByRelevanceFieldEnum)[keyof typeof VueltasOrderByRelevanceFieldEnum]


export const ProcesoFinalOrderByRelevanceFieldEnum = {
  tiempoSalidaPlanta: 'tiempoSalidaPlanta',
  salidaPlantaObservaciones: 'salidaPlantaObservaciones',
  porteriaSalida: 'porteriaSalida',
  tiempoLlegadaPorteria: 'tiempoLlegadaPorteria',
  llegadaPorteriaObservaciones: 'llegadaPorteriaObservaciones'
} as const

export type ProcesoFinalOrderByRelevanceFieldEnum = (typeof ProcesoFinalOrderByRelevanceFieldEnum)[keyof typeof ProcesoFinalOrderByRelevanceFieldEnum]


export const EnvasadoOrderByRelevanceFieldEnum = {
  userName: 'userName',
  fechaInicio: 'fechaInicio',
  tiempoTotal: 'tiempoTotal'
} as const

export type EnvasadoOrderByRelevanceFieldEnum = (typeof EnvasadoOrderByRelevanceFieldEnum)[keyof typeof EnvasadoOrderByRelevanceFieldEnum]


export const PrimerProcesoEnvOrderByRelevanceFieldEnum = {
  numeroTransaccion: 'numeroTransaccion',
  numeroOrden: 'numeroOrden',
  pesadorEntrada: 'pesadorEntrada',
  porteriaEntrada: 'porteriaEntrada',
  metodoCarga: 'metodoCarga',
  numeroEjes: 'numeroEjes',
  puntoDespacho: 'puntoDespacho',
  puntoEnvasado: 'puntoEnvasado',
  basculaEntrada: 'basculaEntrada',
  condicion: 'condicion',
  tiempoScanner: 'tiempoScanner',
  fechaScanner: 'fechaScanner',
  scannerObservaciones: 'scannerObservaciones',
  tiempoPrechequeo: 'tiempoPrechequeo',
  fechaPrechequeo: 'fechaPrechequeo',
  prechequeoObservaciones: 'prechequeoObservaciones',
  tiempoAutorizacion: 'tiempoAutorizacion',
  fechaAutorizacion: 'fechaAutorizacion',
  autorizacionObservaciones: 'autorizacionObservaciones',
  tiempoIngresoPlanta: 'tiempoIngresoPlanta',
  ingresoPlantaObservaciones: 'ingresoPlantaObservaciones',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones'
} as const

export type PrimerProcesoEnvOrderByRelevanceFieldEnum = (typeof PrimerProcesoEnvOrderByRelevanceFieldEnum)[keyof typeof PrimerProcesoEnvOrderByRelevanceFieldEnum]


export const SegundoProcesoEnvOrderByRelevanceFieldEnum = {
  operador: 'operador',
  grupo: 'grupo',
  modeloEquipo: 'modeloEquipo',
  personalAsignadoObservaciones: 'personalAsignadoObservaciones',
  parosStatsTiempoTotalParos: 'parosStatsTiempoTotalParos',
  tiempoLlegadaPunto: 'tiempoLlegadaPunto',
  llegadaPuntoObservaciones: 'llegadaPuntoObservaciones',
  tiempoLlegadaOperador: 'tiempoLlegadaOperador',
  llegadaOperadorObservaciones: 'llegadaOperadorObservaciones',
  tiempoLlegadaGrupo: 'tiempoLlegadaGrupo',
  llegadaGrupoObservaciones: 'llegadaGrupoObservaciones',
  tiempoLlegadaEquipo: 'tiempoLlegadaEquipo',
  llegadaEquipoObservaciones: 'llegadaEquipoObservaciones',
  tiempoInicioCarga: 'tiempoInicioCarga',
  inicioCargaObservaciones: 'inicioCargaObservaciones',
  tiempoTerminaCarga: 'tiempoTerminaCarga',
  terminaCargaObservaciones: 'terminaCargaObservaciones',
  tiempoSalidaPunto: 'tiempoSalidaPunto',
  salidaPuntoObservaciones: 'salidaPuntoObservaciones'
} as const

export type SegundoProcesoEnvOrderByRelevanceFieldEnum = (typeof SegundoProcesoEnvOrderByRelevanceFieldEnum)[keyof typeof SegundoProcesoEnvOrderByRelevanceFieldEnum]


export const TercerProcesoEnvOrderByRelevanceFieldEnum = {
  basculaSalida: 'basculaSalida',
  pesadorSalida: 'pesadorSalida',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones'
} as const

export type TercerProcesoEnvOrderByRelevanceFieldEnum = (typeof TercerProcesoEnvOrderByRelevanceFieldEnum)[keyof typeof TercerProcesoEnvOrderByRelevanceFieldEnum]


export const ProcesoFinalEnvOrderByRelevanceFieldEnum = {
  tiempoSalidaPlanta: 'tiempoSalidaPlanta',
  salidaPlantaObservaciones: 'salidaPlantaObservaciones',
  porteriaSalida: 'porteriaSalida',
  tiempoLlegadaPorteria: 'tiempoLlegadaPorteria',
  llegadaPorteriaObservaciones: 'llegadaPorteriaObservaciones'
} as const

export type ProcesoFinalEnvOrderByRelevanceFieldEnum = (typeof ProcesoFinalEnvOrderByRelevanceFieldEnum)[keyof typeof ProcesoFinalEnvOrderByRelevanceFieldEnum]


export const VueltasEnvOrderByRelevanceFieldEnum = {
  tiempoLlegadaPunto: 'tiempoLlegadaPunto',
  llegadaPuntoObservaciones: 'llegadaPuntoObservaciones',
  tiempoSalidaPunto: 'tiempoSalidaPunto',
  salidaPuntoObservaciones: 'salidaPuntoObservaciones',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones'
} as const

export type VueltasEnvOrderByRelevanceFieldEnum = (typeof VueltasEnvOrderByRelevanceFieldEnum)[keyof typeof VueltasEnvOrderByRelevanceFieldEnum]


export const ParosEnvOrderByRelevanceFieldEnum = {
  inicio: 'inicio',
  fin: 'fin',
  razon: 'razon',
  diffCargaInicio: 'diffCargaInicio',
  duracionParo: 'duracionParo'
} as const

export type ParosEnvOrderByRelevanceFieldEnum = (typeof ParosEnvOrderByRelevanceFieldEnum)[keyof typeof ParosEnvOrderByRelevanceFieldEnum]


export const MolinoOrderByRelevanceFieldEnum = {
  userName: 'userName',
  fechaInicio: 'fechaInicio',
  tiempoTotal: 'tiempoTotal'
} as const

export type MolinoOrderByRelevanceFieldEnum = (typeof MolinoOrderByRelevanceFieldEnum)[keyof typeof MolinoOrderByRelevanceFieldEnum]


export const PrimerProcesoMolOrderByRelevanceFieldEnum = {
  numeroTransaccion: 'numeroTransaccion',
  numeroOrden: 'numeroOrden',
  numeroCriba: 'numeroCriba',
  numeroMolino: 'numeroMolino',
  pesadorEntrada: 'pesadorEntrada',
  porteriaEntrada: 'porteriaEntrada',
  presentacion: 'presentacion',
  puntoDespacho: 'puntoDespacho',
  puntoEnvasado: 'puntoEnvasado',
  basculaEntrada: 'basculaEntrada',
  metodoCarga: 'metodoCarga',
  numeroEjes: 'numeroEjes',
  condicion: 'condicion',
  tiempoScanner: 'tiempoScanner',
  fechaScanner: 'fechaScanner',
  scannerObservaciones: 'scannerObservaciones',
  tiempoPrechequeo: 'tiempoPrechequeo',
  fechaPrechequeo: 'fechaPrechequeo',
  prechequeoObservaciones: 'prechequeoObservaciones',
  tiempoAutorizacion: 'tiempoAutorizacion',
  fechaAutorizacion: 'fechaAutorizacion',
  autorizacionObservaciones: 'autorizacionObservaciones',
  tiempoIngresoPlanta: 'tiempoIngresoPlanta',
  ingresoPlantaObservaciones: 'ingresoPlantaObservaciones',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones'
} as const

export type PrimerProcesoMolOrderByRelevanceFieldEnum = (typeof PrimerProcesoMolOrderByRelevanceFieldEnum)[keyof typeof PrimerProcesoMolOrderByRelevanceFieldEnum]


export const SegundoProcesoMolOrderByRelevanceFieldEnum = {
  operador: 'operador',
  grupo: 'grupo',
  modeloEquipo: 'modeloEquipo',
  personalAsignadoObservaciones: 'personalAsignadoObservaciones',
  parosStatsTiempoTotalParos: 'parosStatsTiempoTotalParos',
  tiempoLlegadaPunto: 'tiempoLlegadaPunto',
  llegadaPuntoObservaciones: 'llegadaPuntoObservaciones',
  tiempoLlegadaOperador: 'tiempoLlegadaOperador',
  llegadaOperadorObservaciones: 'llegadaOperadorObservaciones',
  tiempoLlegadaGrupo: 'tiempoLlegadaGrupo',
  llegadaGrupoObservaciones: 'llegadaGrupoObservaciones',
  tiempoLlegadaEquipo: 'tiempoLlegadaEquipo',
  llegadaEquipoObservaciones: 'llegadaEquipoObservaciones',
  tiempoInicioCarga: 'tiempoInicioCarga',
  inicioCargaObservaciones: 'inicioCargaObservaciones',
  tiempoTerminaCarga: 'tiempoTerminaCarga',
  terminaCargaObservaciones: 'terminaCargaObservaciones',
  tiempoInicioMolido: 'tiempoInicioMolido',
  inicioMolidoObservaciones: 'inicioMolidoObservaciones',
  tiempoTerminaMolido: 'tiempoTerminaMolido',
  terminaMolidoObservaciones: 'terminaMolidoObservaciones',
  tiempoSalidaPunto: 'tiempoSalidaPunto',
  salidaPuntoObservaciones: 'salidaPuntoObservaciones'
} as const

export type SegundoProcesoMolOrderByRelevanceFieldEnum = (typeof SegundoProcesoMolOrderByRelevanceFieldEnum)[keyof typeof SegundoProcesoMolOrderByRelevanceFieldEnum]


export const ParosMolOrderByRelevanceFieldEnum = {
  inicio: 'inicio',
  fin: 'fin',
  razon: 'razon',
  diffCargaInicio: 'diffCargaInicio',
  duracionParo: 'duracionParo'
} as const

export type ParosMolOrderByRelevanceFieldEnum = (typeof ParosMolOrderByRelevanceFieldEnum)[keyof typeof ParosMolOrderByRelevanceFieldEnum]


export const TercerProcesoMolOrderByRelevanceFieldEnum = {
  basculaSalida: 'basculaSalida',
  pesadorSalida: 'pesadorSalida',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones'
} as const

export type TercerProcesoMolOrderByRelevanceFieldEnum = (typeof TercerProcesoMolOrderByRelevanceFieldEnum)[keyof typeof TercerProcesoMolOrderByRelevanceFieldEnum]


export const VueltasMolOrderByRelevanceFieldEnum = {
  tiempoLlegadaPunto: 'tiempoLlegadaPunto',
  llegadaPuntoObservaciones: 'llegadaPuntoObservaciones',
  tiempoSalidaPunto: 'tiempoSalidaPunto',
  salidaPuntoObservaciones: 'salidaPuntoObservaciones',
  tiempoLlegadaBascula: 'tiempoLlegadaBascula',
  llegadaBasculaObservaciones: 'llegadaBasculaObservaciones',
  tiempoEntradaBascula: 'tiempoEntradaBascula',
  entradaBasculaObservaciones: 'entradaBasculaObservaciones',
  tiempoSalidaBascula: 'tiempoSalidaBascula',
  salidaBasculaObservaciones: 'salidaBasculaObservaciones'
} as const

export type VueltasMolOrderByRelevanceFieldEnum = (typeof VueltasMolOrderByRelevanceFieldEnum)[keyof typeof VueltasMolOrderByRelevanceFieldEnum]


export const ProcesoFinalMolOrderByRelevanceFieldEnum = {
  tiempoSalidaPlanta: 'tiempoSalidaPlanta',
  salidaPlantaObservaciones: 'salidaPlantaObservaciones',
  porteriaSalida: 'porteriaSalida',
  tiempoLlegadaPorteria: 'tiempoLlegadaPorteria',
  llegadaPorteriaObservaciones: 'llegadaPorteriaObservaciones'
} as const

export type ProcesoFinalMolOrderByRelevanceFieldEnum = (typeof ProcesoFinalMolOrderByRelevanceFieldEnum)[keyof typeof ProcesoFinalMolOrderByRelevanceFieldEnum]


export const ActividadOrderByRelevanceFieldEnum = {
  fecha: 'fecha',
  userName: 'userName',
  totalDuracion: 'totalDuracion'
} as const

export type ActividadOrderByRelevanceFieldEnum = (typeof ActividadOrderByRelevanceFieldEnum)[keyof typeof ActividadOrderByRelevanceFieldEnum]


export const DetalleActividadOrderByRelevanceFieldEnum = {
  activity: 'activity',
  startTime: 'startTime',
  endTime: 'endTime',
  duration: 'duration',
  responsables: 'responsables'
} as const

export type DetalleActividadOrderByRelevanceFieldEnum = (typeof DetalleActividadOrderByRelevanceFieldEnum)[keyof typeof DetalleActividadOrderByRelevanceFieldEnum]


export const BarcoOrderByRelevanceFieldEnum = {
  muelle: 'muelle',
  vaporBarco: 'vaporBarco',
  fechaArribo: 'fechaArribo',
  horaArribo: 'horaArribo',
  fechaAtraque: 'fechaAtraque',
  horaAtraque: 'horaAtraque',
  fechaRecibido: 'fechaRecibido',
  horaRecibido: 'horaRecibido',
  fechaInicioOperaciones: 'fechaInicioOperaciones',
  horaInicioOperaciones: 'horaInicioOperaciones',
  fechaFinOperaciones: 'fechaFinOperaciones',
  horaFinOperaciones: 'horaFinOperaciones',
  tipoCarga: 'tipoCarga',
  sistemaUtilizado: 'sistemaUtilizado'
} as const

export type BarcoOrderByRelevanceFieldEnum = (typeof BarcoOrderByRelevanceFieldEnum)[keyof typeof BarcoOrderByRelevanceFieldEnum]


export const BitacoraOrderByRelevanceFieldEnum = {
  fechaInicio: 'fechaInicio',
  fecha: 'fecha',
  fechaCierre: 'fechaCierre',
  nombreMuellero: 'nombreMuellero',
  turnoInicio: 'turnoInicio',
  turnoFin: 'turnoFin',
  observaciones: 'observaciones'
} as const

export type BitacoraOrderByRelevanceFieldEnum = (typeof BitacoraOrderByRelevanceFieldEnum)[keyof typeof BitacoraOrderByRelevanceFieldEnum]


export const OperacionOrderByRelevanceFieldEnum = {
  bodega: 'bodega',
  inicio: 'inicio',
  final: 'final',
  minutos: 'minutos',
  actividad: 'actividad'
} as const

export type OperacionOrderByRelevanceFieldEnum = (typeof OperacionOrderByRelevanceFieldEnum)[keyof typeof OperacionOrderByRelevanceFieldEnum]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const EquipoOrderByRelevanceFieldEnum = {
  userName: 'userName',
  equipo: 'equipo',
  horometro: 'horometro',
  operador: 'operador',
  fecha: 'fecha',
  hora: 'hora',
  horaFin: 'horaFin',
  tiempoTotal: 'tiempoTotal',
  horaDe: 'horaDe',
  horaA: 'horaA',
  recomendaciones: 'recomendaciones'
} as const

export type EquipoOrderByRelevanceFieldEnum = (typeof EquipoOrderByRelevanceFieldEnum)[keyof typeof EquipoOrderByRelevanceFieldEnum]


export const TicketOrderByRelevanceFieldEnum = {
  numero: 'numero',
  fecha: 'fecha',
  hora: 'hora',
  userName: 'userName',
  asunto: 'asunto',
  descripcion: 'descripcion',
  imagenUrl: 'imagenUrl',
  imagenPublicId: 'imagenPublicId',
  estado: 'estado'
} as const

export type TicketOrderByRelevanceFieldEnum = (typeof TicketOrderByRelevanceFieldEnum)[keyof typeof TicketOrderByRelevanceFieldEnum]


export const MensajeOrderByRelevanceFieldEnum = {
  text: 'text',
  imageUrl: 'imageUrl',
  imagenPublicId: 'imagenPublicId'
} as const

export type MensajeOrderByRelevanceFieldEnum = (typeof MensajeOrderByRelevanceFieldEnum)[keyof typeof MensajeOrderByRelevanceFieldEnum]


export const ProductoOrderByRelevanceFieldEnum = {
  nombre: 'nombre',
  descripcion: 'descripcion'
} as const

export type ProductoOrderByRelevanceFieldEnum = (typeof ProductoOrderByRelevanceFieldEnum)[keyof typeof ProductoOrderByRelevanceFieldEnum]


export const BarcoRecepcionOrderByRelevanceFieldEnum = {
  vaporBarco: 'vaporBarco',
  observaciones: 'observaciones'
} as const

export type BarcoRecepcionOrderByRelevanceFieldEnum = (typeof BarcoRecepcionOrderByRelevanceFieldEnum)[keyof typeof BarcoRecepcionOrderByRelevanceFieldEnum]


export const RecepcionTrasladoOrderByRelevanceFieldEnum = {
  userName: 'userName',
  fecha: 'fecha',
  hora: 'hora',
  producto: 'producto',
  nombreBarco: 'nombreBarco',
  chequero: 'chequero',
  turnoInicio: 'turnoInicio',
  turnoFin: 'turnoFin',
  puntoCarga: 'puntoCarga',
  puntoDescarga: 'puntoDescarga'
} as const

export type RecepcionTrasladoOrderByRelevanceFieldEnum = (typeof RecepcionTrasladoOrderByRelevanceFieldEnum)[keyof typeof RecepcionTrasladoOrderByRelevanceFieldEnum]


export const EmpresaTransporteOrderByRelevanceFieldEnum = {
  nombre: 'nombre'
} as const

export type EmpresaTransporteOrderByRelevanceFieldEnum = (typeof EmpresaTransporteOrderByRelevanceFieldEnum)[keyof typeof EmpresaTransporteOrderByRelevanceFieldEnum]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  user?: Prisma.UserOmit
  role?: Prisma.RoleOmit
  session?: Prisma.SessionOmit
  demora?: Prisma.DemoraOmit
  primerProceso?: Prisma.PrimerProcesoOmit
  segundoProceso?: Prisma.SegundoProcesoOmit
  tercerProceso?: Prisma.TercerProcesoOmit
  vueltas?: Prisma.VueltasOmit
  procesoFinal?: Prisma.ProcesoFinalOmit
  envasado?: Prisma.EnvasadoOmit
  primerProcesoEnv?: Prisma.PrimerProcesoEnvOmit
  segundoProcesoEnv?: Prisma.SegundoProcesoEnvOmit
  tercerProcesoEnv?: Prisma.TercerProcesoEnvOmit
  procesoFinalEnv?: Prisma.ProcesoFinalEnvOmit
  vueltasEnv?: Prisma.VueltasEnvOmit
  parosEnv?: Prisma.ParosEnvOmit
  molino?: Prisma.MolinoOmit
  primerProcesoMol?: Prisma.PrimerProcesoMolOmit
  segundoProcesoMol?: Prisma.SegundoProcesoMolOmit
  parosMol?: Prisma.ParosMolOmit
  tercerProcesoMol?: Prisma.TercerProcesoMolOmit
  vueltasMol?: Prisma.VueltasMolOmit
  procesoFinalMol?: Prisma.ProcesoFinalMolOmit
  actividad?: Prisma.ActividadOmit
  detalleActividad?: Prisma.DetalleActividadOmit
  barco?: Prisma.BarcoOmit
  bitacora?: Prisma.BitacoraOmit
  operacion?: Prisma.OperacionOmit
  equipo?: Prisma.EquipoOmit
  ticket?: Prisma.TicketOmit
  mensaje?: Prisma.MensajeOmit
  producto?: Prisma.ProductoOmit
  barcoRecepcion?: Prisma.BarcoRecepcionOmit
  recepcionTraslado?: Prisma.RecepcionTrasladoOmit
  empresaTransporte?: Prisma.EmpresaTransporteOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

